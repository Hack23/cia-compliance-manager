// First, define the mocks before any imports
vi.mock("chart.js/auto", () => {
  // Create a mockChartConstructor function that we can spy on
  const mockChartInstance = {
    destroy: vi.fn(),
    update: vi.fn(),
    resize: vi.fn(),
  };

  const mockChartConstructor = vi.fn(() => mockChartInstance);

  return {
    __esModule: true,
    default: mockChartConstructor,
  };
});

// Then import the modules
import { render, screen } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { CHART_TEST_IDS } from "../constants/testIds";
import RadarChart from "./RadarChart";

describe("RadarChart Extended Tests", () => {
  // Fix: Get a direct reference to the mock constructor via direct import
  // We need to get the mock directly from vi.mocked
  const MockChart = vi.fn();

  beforeEach(() => {
    // Reset the mock before each test
    vi.resetAllMocks();

    // Set up the mock for Chart from chart.js/auto
    vi.mocked(import("chart.js/auto"), { actual: false }).default = MockChart;

    // Mock canvas context
    HTMLCanvasElement.prototype.getContext = vi.fn().mockReturnValue({
      canvas: { width: 200, height: 200 },
      clearRect: vi.fn(),
      fill: vi.fn(),
    });

    // Mock window.ResizeObserver with correct type
    global.ResizeObserver = class ResizeObserver {
      constructor(callback: ResizeObserverCallback) {}
      observe() {}
      unobserve() {}
      disconnect() {}
    };

    // Mock requestAnimationFrame
    global.requestAnimationFrame = vi.fn().mockImplementation((callback) => {
      callback(0);
      return 0;
    });

    // Clear mocks before each test
    vi.clearAllMocks();
  });

  it("responds to window resize events", () => {
    // Instead of spying on the component's method, let's spy on window.addEventListener
    const resizeSpy = vi.spyOn(window, "addEventListener");

    render(
      <RadarChart
        availabilityLevel="High"
        integrityLevel="Moderate"
        confidentialityLevel="Low"
      />
    );

    // Check that the resize listener was added
    expect(resizeSpy).toHaveBeenCalledWith("resize", expect.any(Function));

    // Clean up
    resizeSpy.mockRestore();
  });

  it("updates chart when props change", () => {
    const { rerender } = render(
      <RadarChart
        availabilityLevel="Low"
        integrityLevel="Low"
        confidentialityLevel="Low"
      />
    );

    // Change props to trigger update
    rerender(
      <RadarChart
        availabilityLevel="High"
        integrityLevel="High"
        confidentialityLevel="High"
      />
    );

    // Verify the UI has updated
    expect(
      screen.getByTestId(CHART_TEST_IDS.RADAR_AVAILABILITY_VALUE)
    ).toHaveTextContent("High");
    expect(
      screen.getByTestId(CHART_TEST_IDS.RADAR_INTEGRITY_VALUE)
    ).toHaveTextContent("High");
    expect(
      screen.getByTestId(CHART_TEST_IDS.RADAR_CONFIDENTIALITY_VALUE)
    ).toHaveTextContent("High");
  });

  it("properly initializes chart data", () => {
    render(
      <RadarChart
        availabilityLevel="High"
        integrityLevel="Moderate"
        confidentialityLevel="Low"
      />
    );

    // Use the direct reference to check if it was called
    expect(MockChart).toHaveBeenCalled();
  });

  it("cleans up resources when unmounted", () => {
    const { unmount } = render(
      <RadarChart
        availabilityLevel="High"
        integrityLevel="Moderate"
        confidentialityLevel="Low"
      />
    );

    // Unmount to trigger cleanup
    unmount();
  });
});
