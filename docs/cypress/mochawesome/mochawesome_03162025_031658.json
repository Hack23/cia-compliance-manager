{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-16T03:15:58.862Z",
    "end": "2025-03-16T03:16:58.051Z",
    "duration": 59189,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4f4e8833-745f-46d0-aaad-edec2802d880",
      "title": "",
      "fullFile": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "file": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "677e5d91-26ee-423f-afc3-c32c8cb7b067",
          "title": "Availability Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "availability-impact widget should exist",
              "fullTitle": "Availability Impact Widget availability-impact widget should exist",
              "timedOut": null,
              "duration": 3669,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "3fde63c5-e2b0-473f-bb25-55b2639e8e2c",
              "parentUUID": "677e5d91-26ee-423f-afc3-c32c8cb7b067",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Availability Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6640,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "f9377575-4553-4568-b501-f2ed0a8e92c5",
              "parentUUID": "677e5d91-26ee-423f-afc3-c32c8cb7b067",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Availability Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4859,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "f409979e-e93f-401b-9c53-52ee49453ecc",
              "parentUUID": "677e5d91-26ee-423f-afc3-c32c8cb7b067",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Availability Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4813,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "0fcb22b3-973b-461b-8199-21759c4b223f",
              "parentUUID": "677e5d91-26ee-423f-afc3-c32c8cb7b067",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3fde63c5-e2b0-473f-bb25-55b2639e8e2c",
            "f9377575-4553-4568-b501-f2ed0a8e92c5",
            "f409979e-e93f-401b-9c53-52ee49453ecc",
            "0fcb22b3-973b-461b-8199-21759c4b223f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19981,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "20e8bcfa-a85c-4749-bc1b-2921995bb56d",
          "title": "Integrity Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "integrity-impact widget should exist",
              "fullTitle": "Integrity Impact Widget integrity-impact widget should exist",
              "timedOut": null,
              "duration": 3124,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "80d14356-3a30-4ae0-af38-e453843618f5",
              "parentUUID": "20e8bcfa-a85c-4749-bc1b-2921995bb56d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Integrity Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6628,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "9d698cb5-7467-4936-9354-d83363f6d7e0",
              "parentUUID": "20e8bcfa-a85c-4749-bc1b-2921995bb56d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Integrity Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4819,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "f789b90c-79c8-4a68-908f-ae4da002ce1c",
              "parentUUID": "20e8bcfa-a85c-4749-bc1b-2921995bb56d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Integrity Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4805,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "acb1fba5-b241-46af-84de-831225eba672",
              "parentUUID": "20e8bcfa-a85c-4749-bc1b-2921995bb56d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80d14356-3a30-4ae0-af38-e453843618f5",
            "9d698cb5-7467-4936-9354-d83363f6d7e0",
            "f789b90c-79c8-4a68-908f-ae4da002ce1c",
            "acb1fba5-b241-46af-84de-831225eba672"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19376,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "946d8f92-f32a-4e61-b0dd-8a3ed941521f",
          "title": "Confidentiality Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "confidentiality-impact widget should exist",
              "fullTitle": "Confidentiality Impact Widget confidentiality-impact widget should exist",
              "timedOut": null,
              "duration": 3130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "9f4a1392-c11c-4d97-813a-1d3af1008a71",
              "parentUUID": "946d8f92-f32a-4e61-b0dd-8a3ed941521f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Confidentiality Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6609,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "a07f64a1-ace0-461e-88f3-bd780deae208",
              "parentUUID": "946d8f92-f32a-4e61-b0dd-8a3ed941521f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Confidentiality Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4846,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "a3b1d50a-bb22-4593-be47-6cb250d4163c",
              "parentUUID": "946d8f92-f32a-4e61-b0dd-8a3ed941521f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Confidentiality Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4808,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "03c4ce8b-d106-4f4f-939f-d6baddb8640f",
              "parentUUID": "946d8f92-f32a-4e61-b0dd-8a3ed941521f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f4a1392-c11c-4d97-813a-1d3af1008a71",
            "a07f64a1-ace0-461e-88f3-bd780deae208",
            "a3b1d50a-bb22-4593-be47-6cb250d4163c",
            "03c4ce8b-d106-4f4f-939f-d6baddb8640f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19393,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}