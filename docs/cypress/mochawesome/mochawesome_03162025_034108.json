{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-16T03:40:31.474Z",
    "end": "2025-03-16T03:41:08.511Z",
    "duration": 37037,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d325dc88-b621-4a32-b5d2-fdd54a49323f",
      "title": "",
      "fullFile": "cypress/e2e/widgets/all-widgets-security-test.cy.ts",
      "file": "cypress/e2e/widgets/all-widgets-security-test.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
          "title": "All Widgets Security Level Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "handles key security combinations for security-summary",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for security-summary",
              "timedOut": null,
              "duration": 5501,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "08a79380-0145-45fc-9665-25d2cd398504",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for business-impact",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for business-impact",
              "timedOut": null,
              "duration": 4834,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "94cb2b9f-fbec-4f0e-8611-f2554d13c49e",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for cost-estimation",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for cost-estimation",
              "timedOut": null,
              "duration": 4818,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "ee5b33f8-4bd3-4623-ae3b-0ae2b9e664aa",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for compliance-status",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for compliance-status",
              "timedOut": null,
              "duration": 4772,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "eba03800-a0ca-4b2a-ab89-bf917772be01",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for security-summary widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for security-summary widget",
              "timedOut": null,
              "duration": 3725,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "16a8d1bf-08da-428c-bbfb-e93379e2e63d",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for radar-chart widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for radar-chart widget",
              "timedOut": null,
              "duration": 3750,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "fbdd0b35-b2ff-446f-a4be-3975435c3ac5",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for compliance-status widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for compliance-status widget",
              "timedOut": null,
              "duration": 3761,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "8b98baa7-1eec-422e-a669-f2f4f94a6130",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows appropriate widgets for each security profile",
              "fullTitle": "All Widgets Security Level Tests shows appropriate widgets for each security profile",
              "timedOut": null,
              "duration": 2988,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const securityProfiles = [\n  {\n    name: \"None/Low Security\",\n    levels: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    expectedWidgets: [\n      \"security-summary\",\n      \"security-level\",\n      \"cost-estimation\"\n    ],\n    unexpectedWidgets: [\"cia-impact-summary\", \"radar-chart\"]\n    // These might not be visible at low security\n  },\n  {\n    name: \"High Security\",\n    levels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectedWidgets: [\n      \"security-summary\",\n      \"security-level\",\n      \"cost-estimation\",\n      \"value-creation\",\n      \"business-impact\",\n      \"compliance-status\"\n    ],\n    unexpectedWidgets: []\n    // At high security, most widgets should be visible\n  }\n];\nsecurityProfiles.forEach((profile) => {\n  cy.log(`Testing ${profile.name} profile`);\n  cy.setSecurityLevels(...profile.levels);\n  cy.wait(500);\n  profile.expectedWidgets.forEach((widgetId) => {\n    cy.findWidget(widgetId).should(\"exist\");\n  });\n  if (profile.unexpectedWidgets.length > 0) {\n    cy.log(\n      `Note: Some widgets may not be visible in ${profile.name} profile`\n    );\n  }\n});",
              "err": {},
              "uuid": "44932e3a-80c4-4494-9e03-6a3ececc7e3d",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles extreme security transitions without errors",
              "fullTitle": "All Widgets Security Level Tests handles extreme security transitions without errors",
              "timedOut": null,
              "duration": 2633,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.NONE,\n  SECURITY_LEVELS.NONE,\n  SECURITY_LEVELS.NONE\n);\ncy.wait(300);\ncy.window().then((win) => {\n  win.consoleErrors = [];\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.VERY_HIGH,\n    SECURITY_LEVELS.VERY_HIGH,\n    SECURITY_LEVELS.VERY_HIGH\n  );\n  cy.wait(500);\n  cy.wrap(win.consoleErrors || []).should(\"have.length.lessThan\", 3);\n});",
              "err": {},
              "uuid": "1f0210b0-bc5f-4bde-abe4-8b0177883652",
              "parentUUID": "51036b8f-ee54-4409-a5c5-32541f7c1d34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08a79380-0145-45fc-9665-25d2cd398504",
            "94cb2b9f-fbec-4f0e-8611-f2554d13c49e",
            "ee5b33f8-4bd3-4623-ae3b-0ae2b9e664aa",
            "eba03800-a0ca-4b2a-ab89-bf917772be01",
            "16a8d1bf-08da-428c-bbfb-e93379e2e63d",
            "fbdd0b35-b2ff-446f-a4be-3975435c3ac5",
            "8b98baa7-1eec-422e-a669-f2f4f94a6130",
            "44932e3a-80c4-4494-9e03-6a3ececc7e3d",
            "1f0210b0-bc5f-4bde-abe4-8b0177883652"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36782,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}