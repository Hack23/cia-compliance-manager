{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-08T02:59:37.172Z",
    "end": "2025-04-08T02:59:48.917Z",
    "duration": 11745,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2a43680d-f4cf-49b6-8ed6-793c9bad3f29",
      "title": "",
      "fullFile": "cypress/e2e/widgets/implementationguide/security-resources.cy.ts",
      "file": "cypress/e2e/widgets/implementationguide/security-resources.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3fdb3f45-be11-4bc8-bd3d-79f4c794e152",
          "title": "Security Resources Widget Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "is visible and contains expected content",
              "fullTitle": "Security Resources Widget Tests is visible and contains expected content",
              "timedOut": null,
              "duration": 3671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "findWidgetFlexibly(widgetTestId).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`Widget ${widgetName} not found - test will be skipped`);\n    cy.screenshot(`missing-widget-${widgetTestId}`);\n    expect(true).to.equal(true);\n    return;\n  }\n  const widgetText = $widget.text();\n  let foundPattern = false;\n  let matchedPattern = \"\";\n  contentPatterns2.forEach((pattern) => {\n    if (typeof pattern === \"string\") {\n      if (widgetText.includes(pattern)) {\n        foundPattern = true;\n        matchedPattern = pattern;\n      }\n    } else if (pattern.test(widgetText)) {\n      foundPattern = true;\n      matchedPattern = pattern.toString();\n    }\n  });\n  if (foundPattern) {\n    cy.log(`Found expected content pattern: ${matchedPattern}`);\n  } else {\n    cy.log(\n      `No expected content patterns found in widget text: ${widgetText.substring(\n        0,\n        100\n      )}...`\n    );\n  }\n  expect(\n    foundPattern,\n    `Widget should contain at least one expected content pattern`\n  ).to.be.true;\n  cy.wrap($widget).first().screenshot(`widget-${widgetTestId}-baseline`);\n});",
              "err": {},
              "uuid": "96a8a187-4aa9-4c11-a3f4-1115357fe9ad",
              "parentUUID": "3fdb3f45-be11-4bc8-bd3d-79f4c794e152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Security Resources Widget Tests updates content when security levels change",
              "timedOut": null,
              "duration": 5884,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "findWidgetFlexibly(widgetTestId).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`Widget ${widgetName} not found - test will be skipped`);\n    cy.screenshot(`missing-widget-${widgetTestId}-security-change`);\n    expect(true).to.equal(true);\n    return;\n  }\n  const initialContent = $widget.text();\n  if (initialContent.trim().length === 0) {\n    cy.log(\n      `Widget ${widgetName} has no initial content - test will be skipped`\n    );\n    expect(true).to.equal(true);\n    return;\n  }\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.LOW,\n    SECURITY_LEVELS.LOW,\n    SECURITY_LEVELS.LOW\n  );\n  cy.wait(1e3);\n  findWidgetFlexibly(widgetTestId).then(($lowWidget) => {\n    if ($lowWidget.length === 0) {\n      cy.log(\n        `Widget ${widgetName} disappeared after security level change - test will be skipped`\n      );\n      expect(true).to.equal(true);\n      return;\n    }\n    const lowContent = $lowWidget.text();\n    cy.setSecurityLevels(\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    );\n    cy.wait(1e3);\n    findWidgetFlexibly(widgetTestId).then(($highWidget) => {\n      if ($highWidget.length === 0) {\n        cy.log(\n          `Widget ${widgetName} disappeared after high security level change - test will be skipped`\n        );\n        expect(true).to.equal(true);\n        return;\n      }\n      const highContent = $highWidget.text();\n      if (lowContent === highContent) {\n        cy.log(\n          `Warning: Content did not change between low and high security levels`\n        );\n      }\n      const contentChanged = initialContent !== lowContent || lowContent !== highContent;\n      expect(contentChanged, \"Content should change with security levels\").to.be.true;\n    });\n  });\n});",
              "err": {},
              "uuid": "2064141a-bd62-423d-8f69-820409fed893",
              "parentUUID": "3fdb3f45-be11-4bc8-bd3d-79f4c794e152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "supports widget-specific functionality",
              "fullTitle": "Security Resources Widget Tests supports widget-specific functionality",
              "timedOut": null,
              "duration": 2067,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "findWidgetFlexibly(widgetTestId).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\n      `Widget ${widgetName} not found - specific test will be skipped`\n    );\n    cy.screenshot(`missing-widget-${widgetTestId}-specific`);\n    expect(true).to.equal(true);\n    return;\n  }\n  cy.wrap($widget.first()).as(\"currentWidget\");\n  try {\n    additionalTests2();\n  } catch (e) {\n    const errorMessage = e instanceof Error ? e.message : String(e);\n    cy.log(\n      `Error in additional tests for ${widgetName}: ${errorMessage}`\n    );\n    cy.screenshot(`error-${widgetName}-specific-test`);\n  }\n});",
              "err": {},
              "uuid": "f72f3435-4526-4683-afef-5022567e30b3",
              "parentUUID": "3fdb3f45-be11-4bc8-bd3d-79f4c794e152",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96a8a187-4aa9-4c11-a3f4-1115357fe9ad",
            "2064141a-bd62-423d-8f69-820409fed893",
            "f72f3435-4526-4683-afef-5022567e30b3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11622,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}