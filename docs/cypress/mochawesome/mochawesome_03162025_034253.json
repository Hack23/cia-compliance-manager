{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-16T03:41:54.317Z",
    "end": "2025-03-16T03:42:53.687Z",
    "duration": 59370,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c51f0cb6-36a0-4d51-9ac0-f389fda70997",
      "title": "",
      "fullFile": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "file": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "50644a4c-5c33-45ab-b959-69e4e35c3334",
          "title": "Availability Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "availability-impact widget should exist",
              "fullTitle": "Availability Impact Widget availability-impact widget should exist",
              "timedOut": null,
              "duration": 3671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "6932faa7-8c3e-4ef3-bf63-3c6e79e966fc",
              "parentUUID": "50644a4c-5c33-45ab-b959-69e4e35c3334",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Availability Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6724,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "ac061898-a676-4f9f-b00a-61f066c94b66",
              "parentUUID": "50644a4c-5c33-45ab-b959-69e4e35c3334",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Availability Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4905,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "cb8d09fc-630a-48de-a49e-19411cd3c417",
              "parentUUID": "50644a4c-5c33-45ab-b959-69e4e35c3334",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Availability Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4783,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "b7402e70-1308-495c-956f-68570aab1e70",
              "parentUUID": "50644a4c-5c33-45ab-b959-69e4e35c3334",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6932faa7-8c3e-4ef3-bf63-3c6e79e966fc",
            "ac061898-a676-4f9f-b00a-61f066c94b66",
            "cb8d09fc-630a-48de-a49e-19411cd3c417",
            "b7402e70-1308-495c-956f-68570aab1e70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20083,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b94d1727-85c8-4b7e-a964-72a3c9a31790",
          "title": "Integrity Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "integrity-impact widget should exist",
              "fullTitle": "Integrity Impact Widget integrity-impact widget should exist",
              "timedOut": null,
              "duration": 3102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "bdcd69dc-c674-4476-b079-0c66aa72d500",
              "parentUUID": "b94d1727-85c8-4b7e-a964-72a3c9a31790",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Integrity Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6604,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "b8fe9906-3f14-4ff2-8c7e-57b4b308ac84",
              "parentUUID": "b94d1727-85c8-4b7e-a964-72a3c9a31790",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Integrity Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4822,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "1ceb7ebe-f987-4509-8fdf-7860385c03b5",
              "parentUUID": "b94d1727-85c8-4b7e-a964-72a3c9a31790",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Integrity Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4800,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "e3160c12-707c-4c34-a08f-ffe2d818fc9f",
              "parentUUID": "b94d1727-85c8-4b7e-a964-72a3c9a31790",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdcd69dc-c674-4476-b079-0c66aa72d500",
            "b8fe9906-3f14-4ff2-8c7e-57b4b308ac84",
            "1ceb7ebe-f987-4509-8fdf-7860385c03b5",
            "e3160c12-707c-4c34-a08f-ffe2d818fc9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "547e19e6-235a-42d1-8712-824eada902c7",
          "title": "Confidentiality Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "confidentiality-impact widget should exist",
              "fullTitle": "Confidentiality Impact Widget confidentiality-impact widget should exist",
              "timedOut": null,
              "duration": 3178,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "ef73dbf3-c0ee-47c4-937c-1b9d362c5e32",
              "parentUUID": "547e19e6-235a-42d1-8712-824eada902c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Confidentiality Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6636,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "848047e3-c422-4231-8092-6eb534c91a12",
              "parentUUID": "547e19e6-235a-42d1-8712-824eada902c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Confidentiality Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4843,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "f207be7c-ade7-4711-918a-b43b7c775012",
              "parentUUID": "547e19e6-235a-42d1-8712-824eada902c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Confidentiality Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4848,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "b4c1579e-ac3a-42d0-bde2-ca16f14c09d8",
              "parentUUID": "547e19e6-235a-42d1-8712-824eada902c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef73dbf3-c0ee-47c4-937c-1b9d362c5e32",
            "848047e3-c422-4231-8092-6eb534c91a12",
            "f207be7c-ade7-4711-918a-b43b7c775012",
            "b4c1579e-ac3a-42d0-bde2-ca16f14c09d8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19505,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}