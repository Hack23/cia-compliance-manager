{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-16T03:40:09.454Z",
    "end": "2025-03-16T03:40:16.726Z",
    "duration": 7272,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6435e23a-e0b8-49ed-8042-0ece09e31fbb",
      "title": "",
      "fullFile": "cypress/e2e/business-outcomes/compliance-validation.cy.ts",
      "file": "cypress/e2e/business-outcomes/compliance-validation.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90c6ce76-e724-4691-9f28-02a98b410405",
          "title": "Compliance Status Validation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "accurately reflects compliance status based on security levels",
              "fullTitle": "Compliance Status Validation accurately reflects compliance status based on security levels",
              "timedOut": null,
              "duration": 7167,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.screenshot(\"compliance-validation-start\");\nconst complianceScenarios = [\n  {\n    levels: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    expectedStatus: /minimal|basic|non-compliant|low/i,\n    expectedFrameworks: 0\n  },\n  {\n    levels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectedStatus: /compliant|meets requirements|high/i,\n    expectedFrameworks: 1\n    // Less strict - at least one framework\n  }\n];\ncomplianceScenarios.forEach((scenario, index) => {\n  cy.log(\n    `Testing compliance scenario ${index + 1} with levels: ${scenario.levels.join(\", \")}`\n  );\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(scenario.levels[0], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(1).select(scenario.levels[1], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(2).select(scenario.levels[2], { force: true });\n    } else {\n      cy.setSecurityLevels(...scenario.levels);\n    }\n  });\n  cy.wait(1e3);\n  cy.screenshot(`compliance-scenario-${index + 1}`);\n  cy.get(\"body\").then(($body) => {\n    const selectors = [\n      '[data-testid=\"widget-compliance-status\"]',\n      '[data-testid=\"compliance-status\"]',\n      '[data-testid*=\"compliance\"]',\n      '[class*=\"compliance\"]'\n    ];\n    let foundSelector = \"\";\n    for (const selector of selectors) {\n      if ($body.find(selector).length > 0) {\n        foundSelector = selector;\n        break;\n      }\n    }\n    if (foundSelector) {\n      cy.log(`Found compliance widget with selector: ${foundSelector}`);\n      cy.get(foundSelector).within(() => {\n        cy.contains(scenario.expectedStatus).should(\"exist\");\n        if (scenario.expectedFrameworks > 0) {\n          cy.get(\n            'li, [data-testid*=\"framework-item\"], [data-testid*=\"compliance-item\"]'\n          ).should(\"have.length.at.least\", scenario.expectedFrameworks);\n        }\n      });\n    } else {\n      cy.log(\"⚠️ Compliance widget not found with standard selectors\");\n      cy.contains(scenario.expectedStatus).should(\"exist\");\n    }\n  });\n});",
              "err": {},
              "uuid": "627d5099-2087-4568-af93-df70bdbccd59",
              "parentUUID": "90c6ce76-e724-4691-9f28-02a98b410405",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "627d5099-2087-4568-af93-df70bdbccd59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7167,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}