{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-17T09:38:47.371Z",
    "end": "2025-03-17T09:39:51.423Z",
    "duration": 64052,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5949e18f-7706-4262-9bb7-59955cac392e",
      "title": "",
      "fullFile": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "file": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3df6189-41a8-4064-b851-3361b84bed6d",
          "title": "Availability Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "availability-impact widget should exist",
              "fullTitle": "Availability Impact Widget availability-impact widget should exist",
              "timedOut": null,
              "duration": 3918,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "f917e4f3-4f53-4dd7-82eb-35baf09f52c2",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Availability Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 7130,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "a38ba348-8621-4d2d-a816-dc2e0ec49d69",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Availability Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 5200,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "8c23d882-90a5-4382-b94a-992136a20bca",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Availability Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 5070,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "0b9ed219-9361-44a2-86af-352c5d7bf0b0",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f917e4f3-4f53-4dd7-82eb-35baf09f52c2",
            "a38ba348-8621-4d2d-a816-dc2e0ec49d69",
            "8c23d882-90a5-4382-b94a-992136a20bca",
            "0b9ed219-9361-44a2-86af-352c5d7bf0b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
          "title": "Integrity Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "integrity-impact widget should exist",
              "fullTitle": "Integrity Impact Widget integrity-impact widget should exist",
              "timedOut": null,
              "duration": 3575,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "141707c6-5d9f-4112-9b0a-2dc2e85138a0",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Integrity Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 7018,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "10c6eb62-1bba-4fa1-af19-0d2318df6877",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Integrity Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 5216,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "b4709cc2-5290-4325-a8f7-2f9f2ca7fe10",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Integrity Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 5154,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "148da0e6-16fe-44e3-80c3-1071583fca7d",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "141707c6-5d9f-4112-9b0a-2dc2e85138a0",
            "10c6eb62-1bba-4fa1-af19-0d2318df6877",
            "b4709cc2-5290-4325-a8f7-2f9f2ca7fe10",
            "148da0e6-16fe-44e3-80c3-1071583fca7d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20963,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "11b55b79-95e7-4605-9eba-c503e90af367",
          "title": "Confidentiality Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "confidentiality-impact widget should exist",
              "fullTitle": "Confidentiality Impact Widget confidentiality-impact widget should exist",
              "timedOut": null,
              "duration": 3513,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "a599c820-393a-4ec4-9b99-77202092cbe4",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Confidentiality Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 7077,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "986fa883-031f-4864-9c41-291858945f96",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Confidentiality Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 5219,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "ee654fd5-96fe-40f0-aac6-7ff7bf38b63b",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Confidentiality Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 5102,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "fda2334a-8950-46f3-8ded-d7ade736cad7",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a599c820-393a-4ec4-9b99-77202092cbe4",
            "986fa883-031f-4864-9c41-291858945f96",
            "ee654fd5-96fe-40f0-aac6-7ff7bf38b63b",
            "fda2334a-8950-46f3-8ded-d7ade736cad7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20911,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}