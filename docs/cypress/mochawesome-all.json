{
  "stats": {
    "suites": 12,
    "tests": 58,
    "passes": 58,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 58,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-03-16T03:58:35.136Z",
    "end": "2025-03-16T04:03:04.217Z",
    "duration": 269081
  },
  "results": [
    {
      "uuid": "684c98e5-6f16-406d-8e15-6126de49f097",
      "title": "",
      "fullFile": "cypress/e2e/business-outcomes/compliance-validation.cy.ts",
      "file": "cypress/e2e/business-outcomes/compliance-validation.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0e2728d2-bac6-44b8-90ad-c70d81e1a6d1",
          "title": "Compliance Status Validation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "accurately reflects compliance status based on security levels",
              "fullTitle": "Compliance Status Validation accurately reflects compliance status based on security levels",
              "timedOut": null,
              "duration": 7557,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.screenshot(\"compliance-validation-start\");\nconst complianceScenarios = [\n  {\n    levels: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    expectedStatus: /minimal|basic|non-compliant|low/i,\n    expectedFrameworks: 0\n  },\n  {\n    levels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectedStatus: /compliant|meets requirements|high/i,\n    expectedFrameworks: 1\n    // Less strict - at least one framework\n  }\n];\ncomplianceScenarios.forEach((scenario, index) => {\n  cy.log(\n    `Testing compliance scenario ${index + 1} with levels: ${scenario.levels.join(\", \")}`\n  );\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(scenario.levels[0], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(1).select(scenario.levels[1], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(2).select(scenario.levels[2], { force: true });\n    } else {\n      cy.setSecurityLevels(...scenario.levels);\n    }\n  });\n  cy.wait(1e3);\n  cy.screenshot(`compliance-scenario-${index + 1}`);\n  cy.get(\"body\").then(($body) => {\n    const selectors = [\n      '[data-testid=\"widget-compliance-status\"]',\n      '[data-testid=\"compliance-status\"]',\n      '[data-testid*=\"compliance\"]',\n      '[class*=\"compliance\"]'\n    ];\n    let foundSelector = \"\";\n    for (const selector of selectors) {\n      if ($body.find(selector).length > 0) {\n        foundSelector = selector;\n        break;\n      }\n    }\n    if (foundSelector) {\n      cy.log(`Found compliance widget with selector: ${foundSelector}`);\n      cy.get(foundSelector).within(() => {\n        cy.contains(scenario.expectedStatus).should(\"exist\");\n        if (scenario.expectedFrameworks > 0) {\n          cy.get(\n            'li, [data-testid*=\"framework-item\"], [data-testid*=\"compliance-item\"]'\n          ).should(\"have.length.at.least\", scenario.expectedFrameworks);\n        }\n      });\n    } else {\n      cy.log(\"⚠️ Compliance widget not found with standard selectors\");\n      cy.contains(scenario.expectedStatus).should(\"exist\");\n    }\n  });\n});",
              "err": {},
              "uuid": "bbfb6fa6-ad80-40bd-af3f-10709522cf43",
              "parentUUID": "0e2728d2-bac6-44b8-90ad-c70d81e1a6d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbfb6fa6-ad80-40bd-af3f-10709522cf43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7557,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "268c7548-262f-49fe-ac50-5f01042c3e03",
      "title": "",
      "fullFile": "cypress/e2e/security/security-level-transitions.cy.ts",
      "file": "cypress/e2e/security/security-level-transitions.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4c79cddc-e451-408e-9767-d46ab70330d6",
          "title": "Security Level Transitions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "maintains application integrity during security level changes",
              "fullTitle": "Security Level Transitions maintains application integrity during security level changes",
              "timedOut": null,
              "duration": 11112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const securityTransitions = [\n  // Test dramatic change (low to high)\n  {\n    from: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    to: [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH]\n  },\n  // Test mixed security levels\n  {\n    from: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    to: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.LOW,\n      SECURITY_LEVELS.MODERATE\n    ]\n  }\n];\nfor (const transition of securityTransitions) {\n  cy.log(`Testing transition from ${transition.from} to ${transition.to}`);\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(transition.from[0], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(1).select(transition.from[1], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(2).select(transition.from[2], { force: true });\n    } else {\n      cy.setSecurityLevels(...transition.from);\n    }\n  });\n  cy.wait(1e3);\n  cy.screenshot(`transition-initial-${transition.from.join(\"-\")}`);\n  cy.log(\"Verifying initial widget state\");\n  let initialWidgetFound = false;\n  cy.get(\"body\").then(($body) => {\n    const summarySelectors = [\n      '[data-testid=\"widget-security-summary\"]',\n      '[data-testid=\"security-summary\"]',\n      '[data-testid*=\"security\"][data-testid*=\"summary\"]'\n    ];\n    for (const selector of summarySelectors) {\n      if ($body.find(selector).length > 0) {\n        initialWidgetFound = true;\n        cy.log(`Found security summary with selector: ${selector}`);\n        cy.get(selector).should(\"exist\").as(\"securitySummary\");\n        break;\n      }\n    }\n    if (!initialWidgetFound) {\n      cy.log(\"⚠️ Could not find security summary widget\");\n      cy.get(\"body\").as(\"securitySummary\");\n    }\n  });\n  cy.get(\"body\").should(\"not.contain.text\", \"undefined\");\n  cy.get(\"body\").should(\"not.contain.text\", \"NaN\");\n  cy.get(\"body\").invoke(\"text\").as(\"initialBodyText\");\n  cy.log(`Changing to security levels: ${transition.to}`);\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(transition.to[0], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(1).select(transition.to[1], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(2).select(transition.to[2], { force: true });\n    } else {\n      cy.setSecurityLevels(...transition.to);\n    }\n  });\n  cy.wait(1e3);\n  cy.screenshot(`transition-after-${transition.to.join(\"-\")}`);\n  if (initialWidgetFound) {\n    cy.get(\"@securitySummary\").should(\"exist\");\n  }\n  cy.get(\"body\").invoke(\"text\").then((newBodyText) => {\n    cy.get(\"@initialBodyText\").then((initialBodyText) => {\n      if (newBodyText !== initialBodyText) {\n        cy.log(\"✓ Page content changed after security level transition\");\n      } else {\n        cy.log(\"⚠️ Page content did not change after transition\");\n      }\n    });\n  });\n  cy.get(\"body\").should(\"not.contain.text\", \"undefined\");\n  cy.get(\"body\").should(\"not.contain.text\", \"NaN\");\n  cy.get(\"body\").should(\"not.contain.text\", \"Error\");\n  cy.window().then((win) => {\n    if (win.consoleErrors && win.consoleErrors.length > 0) {\n      cy.log(`⚠️ Console errors found: ${win.consoleErrors.length}`);\n      win.consoleErrors.forEach((err, i) => {\n        if (i < 3) {\n          cy.log(`Error ${i + 1}: ${err.substring(0, 100)}...`);\n        }\n      });\n    } else {\n      cy.log(\"✓ No console errors detected\");\n    }\n  });\n}",
              "err": {},
              "uuid": "edca4485-4173-4376-9cfa-23eb7ca9a634",
              "parentUUID": "4c79cddc-e451-408e-9767-d46ab70330d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "edca4485-4173-4376-9cfa-23eb7ca9a634"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d3ed748f-35ae-4f1b-9db5-7e036976e004",
      "title": "",
      "fullFile": "cypress/e2e/widgets/all-widgets-security-test.cy.ts",
      "file": "cypress/e2e/widgets/all-widgets-security-test.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "432441eb-2735-44a8-80d8-691744f0d8f8",
          "title": "All Widgets Security Level Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "handles key security combinations for security-summary",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for security-summary",
              "timedOut": null,
              "duration": 5882,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "4897946e-8ba3-4970-b8f6-60c1ae288df7",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for business-impact",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for business-impact",
              "timedOut": null,
              "duration": 5169,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "1353ff81-af7f-426a-9cbd-37727f7a0e43",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for cost-estimation",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for cost-estimation",
              "timedOut": null,
              "duration": 4776,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "424d7675-6792-48fc-990c-c859b798d4c2",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for compliance-status",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for compliance-status",
              "timedOut": null,
              "duration": 4805,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "32cd98fb-1cf4-4632-8c83-0703377aa6b0",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for security-summary widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for security-summary widget",
              "timedOut": null,
              "duration": 3728,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "1858997d-d6d1-49ed-b133-0fa03f0bbe72",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for radar-chart widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for radar-chart widget",
              "timedOut": null,
              "duration": 3728,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "898730e2-350a-4162-bc43-e74a1f680352",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for compliance-status widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for compliance-status widget",
              "timedOut": null,
              "duration": 3773,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "be124216-8121-4029-9477-179e2bdf6781",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows appropriate widgets for each security profile",
              "fullTitle": "All Widgets Security Level Tests shows appropriate widgets for each security profile",
              "timedOut": null,
              "duration": 2950,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const securityProfiles = [\n  {\n    name: \"None/Low Security\",\n    levels: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    expectedWidgets: [\n      \"security-summary\",\n      \"security-level\",\n      \"cost-estimation\"\n    ],\n    unexpectedWidgets: [\"cia-impact-summary\", \"radar-chart\"]\n    // These might not be visible at low security\n  },\n  {\n    name: \"High Security\",\n    levels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectedWidgets: [\n      \"security-summary\",\n      \"security-level\",\n      \"cost-estimation\",\n      \"value-creation\",\n      \"business-impact\",\n      \"compliance-status\"\n    ],\n    unexpectedWidgets: []\n    // At high security, most widgets should be visible\n  }\n];\nsecurityProfiles.forEach((profile) => {\n  cy.log(`Testing ${profile.name} profile`);\n  cy.setSecurityLevels(...profile.levels);\n  cy.wait(500);\n  profile.expectedWidgets.forEach((widgetId) => {\n    cy.findWidget(widgetId).should(\"exist\");\n  });\n  if (profile.unexpectedWidgets.length > 0) {\n    cy.log(\n      `Note: Some widgets may not be visible in ${profile.name} profile`\n    );\n  }\n});",
              "err": {},
              "uuid": "d8b04056-3542-427f-84d9-c7e168e52cc7",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles extreme security transitions without errors",
              "fullTitle": "All Widgets Security Level Tests handles extreme security transitions without errors",
              "timedOut": null,
              "duration": 2636,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.NONE,\n  SECURITY_LEVELS.NONE,\n  SECURITY_LEVELS.NONE\n);\ncy.wait(300);\ncy.window().then((win) => {\n  win.consoleErrors = [];\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.VERY_HIGH,\n    SECURITY_LEVELS.VERY_HIGH,\n    SECURITY_LEVELS.VERY_HIGH\n  );\n  cy.wait(500);\n  cy.wrap(win.consoleErrors || []).should(\"have.length.lessThan\", 3);\n});",
              "err": {},
              "uuid": "189e04c0-b0c7-4799-84da-a08c037a2092",
              "parentUUID": "432441eb-2735-44a8-80d8-691744f0d8f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4897946e-8ba3-4970-b8f6-60c1ae288df7",
            "1353ff81-af7f-426a-9cbd-37727f7a0e43",
            "424d7675-6792-48fc-990c-c859b798d4c2",
            "32cd98fb-1cf4-4632-8c83-0703377aa6b0",
            "1858997d-d6d1-49ed-b133-0fa03f0bbe72",
            "898730e2-350a-4162-bc43-e74a1f680352",
            "be124216-8121-4029-9477-179e2bdf6781",
            "d8b04056-3542-427f-84d9-c7e168e52cc7",
            "189e04c0-b0c7-4799-84da-a08c037a2092"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37447,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "215a03ab-b85d-40f8-bc9b-e11f283a5715",
      "title": "",
      "fullFile": "cypress/e2e/widgets/availability-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/availability-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "990cde66-3050-41a3-b3b0-5f891e987297",
          "title": "Availability Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays availability impact analysis",
              "fullTitle": "Availability Impact Widget displays availability impact analysis",
              "timedOut": null,
              "duration": 1340,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const selectors = [\n    '[data-testid*=\"availability-impact\"]',\n    '[data-testid=\"widget-availability-impact-container\"]',\n    '[data-testid=\"widget-availability-impact\"]',\n    '[class*=\"availability-impact\"]'\n  ];\n  let foundSelector = false;\n  for (const selector of selectors) {\n    if ($body.find(selector).length > 0) {\n      cy.log(`Found availability widget with selector: ${selector}`);\n      cy.get(selector).should(\"exist\").scrollIntoView().should(\"be.visible\");\n      foundSelector = true;\n      break;\n    }\n  }\n  if (!foundSelector) {\n    cy.log(\n      \"⚠️ Could not find availability impact widget with standard selectors\"\n    );\n    return;\n  }\n  cy.verifyContentPresent([\n    /availability|uptime|recovery/i,\n    /impact|effect|consequence/i\n  ]);\n});",
              "err": {},
              "uuid": "31545431-44a4-4325-8eb0-0f6c040ddd7c",
              "parentUUID": "990cde66-3050-41a3-b3b0-5f891e987297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Availability Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 2781,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"availability-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  const initialContent = $widget.text();\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.LOW, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW\n      );\n    }\n  });\n  cy.wait(500);\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.HIGH, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH\n      );\n    }\n  });\n  cy.wait(500);\n  cy.findWidget(\"availability-impact\").invoke(\"text\").then((newContent) => {\n    cy.log(`Initial content length: ${initialContent.length}`);\n    cy.log(`New content length: ${newContent.length}`);\n  });\n});",
              "err": {},
              "uuid": "9ebb8550-65d5-485a-acc8-b33b9379be27",
              "parentUUID": "990cde66-3050-41a3-b3b0-5f891e987297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows technical metrics and recommendations",
              "fullTitle": "Availability Impact Widget shows technical metrics and recommendations",
              "timedOut": null,
              "duration": 1883,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"availability-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.MODERATE, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.MODERATE, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.MODERATE, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.MODERATE,\n        SECURITY_LEVELS.MODERATE,\n        SECURITY_LEVELS.MODERATE\n      );\n    }\n  });\n  cy.wait(500);\n  cy.log(\"Checking for availability metrics terminology\");\n  cy.get(\"body\").contains(/rto|rpo|mttr|uptime/i);\n  cy.log(\"Checking for recommendation terminology\");\n  cy.get(\"body\").contains(/recommend|suggest/i);\n});",
              "err": {},
              "uuid": "34c616fd-77bb-4bb9-89a6-fda580ce2d84",
              "parentUUID": "990cde66-3050-41a3-b3b0-5f891e987297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays business impact information",
              "fullTitle": "Availability Impact Widget displays business impact information",
              "timedOut": null,
              "duration": 1838,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"availability-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.MODERATE, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.LOW, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.MODERATE,\n        SECURITY_LEVELS.LOW\n      );\n    }\n  });\n  cy.wait(500);\n  cy.contains(/business impact|effect on business|operational impact/i);\n});",
              "err": {},
              "uuid": "0262a286-3a12-48ab-8574-bdfa74cd7bb8",
              "parentUUID": "990cde66-3050-41a3-b3b0-5f891e987297",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31545431-44a4-4325-8eb0-0f6c040ddd7c",
            "9ebb8550-65d5-485a-acc8-b33b9379be27",
            "34c616fd-77bb-4bb9-89a6-fda580ce2d84",
            "0262a286-3a12-48ab-8574-bdfa74cd7bb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7842,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ae532592-6a42-4985-91c1-7d0106a4d3bf",
      "title": "",
      "fullFile": "cypress/e2e/widgets/business-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/business-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "31dc14b4-e493-42df-945d-12e386739364",
          "title": "Business Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display the business impact widget",
              "fullTitle": "Business Impact Widget should display the business impact widget",
              "timedOut": null,
              "duration": 1306,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const selectors = [\n    '[data-testid=\"widget-business-impact-container\"]',\n    '[data-testid=\"business-impact-widget\"]',\n    '[data-testid*=\"business-impact\"]',\n    '[class*=\"business-impact\"]'\n  ];\n  let found = false;\n  for (const selector of selectors) {\n    if ($body.find(selector).length > 0) {\n      cy.get(selector).should(\"exist\").and(\"be.visible\");\n      found = true;\n      break;\n    }\n  }\n  if (!found) {\n    cy.log(\"⚠️ Business impact widget not found with standard selectors\");\n  }\n});",
              "err": {},
              "uuid": "f1480a72-09b6-4fdc-b3ef-f03bbc615f03",
              "parentUUID": "31dc14b4-e493-42df-945d-12e386739364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Business Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 2777,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const initialContent = $widget.text();\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.LOW, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW\n      );\n    }\n  });\n  cy.wait(500);\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.HIGH, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH\n      );\n    }\n  });\n  cy.wait(500);\n  cy.findWidget(\"business-impact\").invoke(\"text\").then((newContent) => {\n    if (newContent !== initialContent) {\n      cy.log(\n        \"✅ Content changed as expected after security level change\"\n      );\n    } else {\n      cy.log(\"⚠️ Content did not change after security level change\");\n    }\n  });\n});",
              "err": {},
              "uuid": "63f5bdbd-f431-405a-9794-00d9bf6a0d48",
              "parentUUID": "31dc14b4-e493-42df-945d-12e386739364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "has functioning CIA tab navigation",
              "fullTitle": "Business Impact Widget has functioning CIA tab navigation",
              "timedOut": null,
              "duration": 1562,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const tabSelectors = [\n    'button, [role=\"tab\"]',\n    'button:contains(\"Availability\"), button:contains(\"Integrity\"), button:contains(\"Confidentiality\")'\n  ];\n  let tabsFound = false;\n  for (const selector of tabSelectors) {\n    const $tabs = $widget.find(selector);\n    if ($tabs.length >= 2) {\n      tabsFound = true;\n      cy.log(`Found ${$tabs.length} tabs with selector: ${selector}`);\n      cy.wrap($widget).find(selector).each(($tab, index) => {\n        if (index > 0 && index < 3) {\n          cy.log(`Clicking tab ${index}`);\n          cy.wrap($tab).click({ force: true });\n          cy.wait(300);\n        }\n      });\n      break;\n    }\n  }\n  if (!tabsFound) {\n    cy.log(\n      \"⚠️ No tabs found in business impact widget - this might be expected if the widget doesn't use tabs\"\n    );\n  }\n});",
              "err": {},
              "uuid": "459a8912-9f54-49d1-b7fe-2ffda1b4faaf",
              "parentUUID": "31dc14b4-e493-42df-945d-12e386739364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate impact cards for high security",
              "fullTitle": "Business Impact Widget displays appropriate impact cards for high security",
              "timedOut": null,
              "duration": 1851,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.HIGH, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH\n      );\n    }\n  });\n  cy.wait(500);\n  cy.wrap($widget).within(() => {\n    cy.contains(/impact|effect|consequence/i).should(\"exist\");\n    cy.contains(/financial|revenue|cost/i).should(\"exist\");\n    cy.contains(/operational|process|function/i).should(\"exist\");\n  });\n});",
              "err": {},
              "uuid": "8d8515c1-edfe-4aa2-a9f4-8e381a239c9a",
              "parentUUID": "31dc14b4-e493-42df-945d-12e386739364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows different impacts for mixed security levels",
              "fullTitle": "Business Impact Widget shows different impacts for mixed security levels",
              "timedOut": null,
              "duration": 1870,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.MODERATE, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.MODERATE\n      );\n    }\n  });\n  cy.wait(500);\n  cy.wrap($widget).invoke(\"text\").then((text) => {\n    const patterns = [\n      /availability|integrity|confidentiality/i,\n      /impact|effect|consequence/i,\n      /business|operation|financial/i\n    ];\n    const matchingPatterns = patterns.filter(\n      (pattern) => pattern.test(text)\n    );\n    cy.log(\n      `Found ${matchingPatterns.length} matching patterns in widget`\n    );\n    expect(matchingPatterns.length).to.be.greaterThan(0);\n  });\n});",
              "err": {},
              "uuid": "d2246212-8c5c-4b27-ac73-3dae9e7a2a17",
              "parentUUID": "31dc14b4-e493-42df-945d-12e386739364",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1480a72-09b6-4fdc-b3ef-f03bbc615f03",
            "63f5bdbd-f431-405a-9794-00d9bf6a0d48",
            "459a8912-9f54-49d1-b7fe-2ffda1b4faaf",
            "8d8515c1-edfe-4aa2-a9f4-8e381a239c9a",
            "d2246212-8c5c-4b27-ac73-3dae9e7a2a17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9366,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bbc42ebd-fad5-4543-be4d-ad4c18c73107",
      "title": "",
      "fullFile": "cypress/e2e/widgets/cia-impact-summary-widget.cy.ts",
      "file": "cypress/e2e/widgets/cia-impact-summary-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3f467cae-06e9-4dc0-ba42-dc69f6834255",
          "title": "CIA Impact Summary Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cia-impact-summary widget should exist",
              "fullTitle": "CIA Impact Summary Widget cia-impact-summary widget should exist",
              "timedOut": null,
              "duration": 3738,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "b91615ce-be0f-424e-ab9b-01f9521e75c3",
              "parentUUID": "3f467cae-06e9-4dc0-ba42-dc69f6834255",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "CIA Impact Summary Widget updates content when security levels change",
              "timedOut": null,
              "duration": 6907,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"cia-impact-summary\");",
              "err": {},
              "uuid": "c5d981f6-3d34-4a8d-9470-8e6c7f7cb164",
              "parentUUID": "3f467cae-06e9-4dc0-ba42-dc69f6834255",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows comprehensive CIA impact summary at high security levels",
              "fullTitle": "CIA Impact Summary Widget shows comprehensive CIA impact summary at high security levels",
              "timedOut": null,
              "duration": 4940,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"cia-impact-summary\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.wait(1e3);\ncy.findWidget(\"cia-impact-summary\").then(($widget) => {\n  const text = $widget.text().toLowerCase();\n  const hasAvailabilityTerms = /availability|uptime|recovery|access/i.test(\n    text\n  );\n  const hasIntegrityTerms = /integrity|accuracy|valid|correct/i.test(text);\n  const hasConfidentialTerms = /confidential|privacy|sensitive|secret/i.test(text);\n  cy.log(`Found availability terms: ${hasAvailabilityTerms}`);\n  cy.log(`Found integrity terms: ${hasIntegrityTerms}`);\n  cy.log(`Found confidentiality terms: ${hasConfidentialTerms}`);\n  expect(hasAvailabilityTerms || hasIntegrityTerms || hasConfidentialTerms).to.be.true;\n});",
              "err": {},
              "uuid": "5971f044-2c69-45ef-a67c-052889f960fb",
              "parentUUID": "3f467cae-06e9-4dc0-ba42-dc69f6834255",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "properly displays mixed security levels",
              "fullTitle": "CIA Impact Summary Widget properly displays mixed security levels",
              "timedOut": null,
              "duration": 6719,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"cia-impact-summary\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.MODERATE\n);\ncy.wait(1e3);\ncy.findWidget(\"cia-impact-summary\").then(($widgetBefore) => {\n  const textBefore = $widgetBefore.text();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.LOW,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.LOW\n  );\n  cy.wait(1e3);\n  cy.findWidget(\"cia-impact-summary\").then(($widgetAfter) => {\n    const textAfter = $widgetAfter.text();\n    expect(textAfter).not.to.equal(textBefore);\n  });\n});",
              "err": {},
              "uuid": "40178301-a73e-4ffb-b7ae-25d756146ca3",
              "parentUUID": "3f467cae-06e9-4dc0-ba42-dc69f6834255",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b91615ce-be0f-424e-ab9b-01f9521e75c3",
            "c5d981f6-3d34-4a8d-9470-8e6c7f7cb164",
            "5971f044-2c69-45ef-a67c-052889f960fb",
            "40178301-a73e-4ffb-b7ae-25d756146ca3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22304,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6f79ad4c-6f11-4fc0-aec5-e1d5b8ff5acd",
      "title": "",
      "fullFile": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "file": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8217ac20-9a88-42da-bebe-2f75ceb9f2ee",
          "title": "Availability Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "availability-impact widget should exist",
              "fullTitle": "Availability Impact Widget availability-impact widget should exist",
              "timedOut": null,
              "duration": 3708,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "a0bffbaf-2a26-440a-8334-01032d11ef15",
              "parentUUID": "8217ac20-9a88-42da-bebe-2f75ceb9f2ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Availability Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6636,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "6b555f6b-d4f9-46a2-818e-fe30cbc37739",
              "parentUUID": "8217ac20-9a88-42da-bebe-2f75ceb9f2ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Availability Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4833,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "18c9df88-206f-484d-8c8e-fb69c2a69eca",
              "parentUUID": "8217ac20-9a88-42da-bebe-2f75ceb9f2ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Availability Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4787,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "6b6d96b1-a609-4b3c-bc4b-68707eebcc4c",
              "parentUUID": "8217ac20-9a88-42da-bebe-2f75ceb9f2ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0bffbaf-2a26-440a-8334-01032d11ef15",
            "6b555f6b-d4f9-46a2-818e-fe30cbc37739",
            "18c9df88-206f-484d-8c8e-fb69c2a69eca",
            "6b6d96b1-a609-4b3c-bc4b-68707eebcc4c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19964,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f214ddc7-1080-437e-ab01-b3d0c35d44f9",
          "title": "Integrity Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "integrity-impact widget should exist",
              "fullTitle": "Integrity Impact Widget integrity-impact widget should exist",
              "timedOut": null,
              "duration": 3117,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "5eca913f-9c71-44f5-b365-db8efcefd0b6",
              "parentUUID": "f214ddc7-1080-437e-ab01-b3d0c35d44f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Integrity Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6600,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "68bcc86d-542b-4e87-b85f-bc566a3e7178",
              "parentUUID": "f214ddc7-1080-437e-ab01-b3d0c35d44f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Integrity Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4819,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "a5c9ad66-1fee-4c91-b7c2-bde206348ef2",
              "parentUUID": "f214ddc7-1080-437e-ab01-b3d0c35d44f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Integrity Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4837,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "55cb1b91-3b7b-4840-9a92-9b4f179453ff",
              "parentUUID": "f214ddc7-1080-437e-ab01-b3d0c35d44f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5eca913f-9c71-44f5-b365-db8efcefd0b6",
            "68bcc86d-542b-4e87-b85f-bc566a3e7178",
            "a5c9ad66-1fee-4c91-b7c2-bde206348ef2",
            "55cb1b91-3b7b-4840-9a92-9b4f179453ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19373,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "46af1e23-4cc7-4b39-8c59-b540930ec5e0",
          "title": "Confidentiality Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "confidentiality-impact widget should exist",
              "fullTitle": "Confidentiality Impact Widget confidentiality-impact widget should exist",
              "timedOut": null,
              "duration": 3125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "15d7d244-16ad-4af4-bbf7-af2735eba1bd",
              "parentUUID": "46af1e23-4cc7-4b39-8c59-b540930ec5e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Confidentiality Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 6589,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "86cf52b8-5561-4007-865b-cf909ed4dc59",
              "parentUUID": "46af1e23-4cc7-4b39-8c59-b540930ec5e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Confidentiality Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 4858,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "8e81096d-0914-4768-b65c-3f3e9cd1e6de",
              "parentUUID": "46af1e23-4cc7-4b39-8c59-b540930ec5e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Confidentiality Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 4794,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "2dd23712-7256-4cc5-a774-996902ad84b4",
              "parentUUID": "46af1e23-4cc7-4b39-8c59-b540930ec5e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15d7d244-16ad-4af4-bbf7-af2735eba1bd",
            "86cf52b8-5561-4007-865b-cf909ed4dc59",
            "8e81096d-0914-4768-b65c-3f3e9cd1e6de",
            "2dd23712-7256-4cc5-a774-996902ad84b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19366,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f7ce2a9c-ed48-4d9b-9dc3-353c3e4eadcb",
      "title": "",
      "fullFile": "cypress/e2e/widgets/confidentiality-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/confidentiality-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5773dfe4-17b7-4231-aa47-93df465064bf",
          "title": "Confidentiality Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "confidentiality-impact widget should exist",
              "fullTitle": "Confidentiality Impact Widget confidentiality-impact widget should exist",
              "timedOut": null,
              "duration": 3664,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "f6634cb7-4422-45ec-ac4f-36af358766d1",
              "parentUUID": "5773dfe4-17b7-4231-aa47-93df465064bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Confidentiality Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 6625,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"confidentiality-impact\");",
              "err": {},
              "uuid": "33cf2768-94ef-40d8-b67e-e97222b90991",
              "parentUUID": "5773dfe4-17b7-4231-aa47-93df465064bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays detailed confidentiality impacts with high security",
              "fullTitle": "Confidentiality Impact Widget displays detailed confidentiality impacts with high security",
              "timedOut": null,
              "duration": 4884,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"confidentiality-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.HIGH\n  // High confidentiality\n);\ncy.wait(1e3);\ncy.findWidget(\"confidentiality-impact\").within(() => {\n  cy.contains(\n    /privacy|data protection|sensitive|confidential|encrypt/i\n  ).should(\"exist\");\n});",
              "err": {},
              "uuid": "c186bdd5-e2a0-47ca-9cc0-d4ada8f9dd15",
              "parentUUID": "5773dfe4-17b7-4231-aa47-93df465064bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "provides appropriate confidentiality recommendations",
              "fullTitle": "Confidentiality Impact Widget provides appropriate confidentiality recommendations",
              "timedOut": null,
              "duration": 4828,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"confidentiality-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.wait(1e3);\ncy.findWidget(\"confidentiality-impact\").within(() => {\n  cy.contains(/recommend|suggest|practice|implement/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "960a731e-be24-4023-ab30-c028bfff2e15",
              "parentUUID": "5773dfe4-17b7-4231-aa47-93df465064bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6634cb7-4422-45ec-ac4f-36af358766d1",
            "33cf2768-94ef-40d8-b67e-e97222b90991",
            "c186bdd5-e2a0-47ca-9cc0-d4ada8f9dd15",
            "960a731e-be24-4023-ab30-c028bfff2e15"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20001,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "702db3ab-4128-4e04-b73a-b9b3eadce9fe",
      "title": "",
      "fullFile": "cypress/e2e/widgets/integrity-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/integrity-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4598a09a-dd44-4806-8164-e902df000ed0",
          "title": "Integrity Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "integrity-impact widget should exist",
              "fullTitle": "Integrity Impact Widget integrity-impact widget should exist",
              "timedOut": null,
              "duration": 3629,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "84973938-876c-4d57-9f3d-119b8c67f911",
              "parentUUID": "4598a09a-dd44-4806-8164-e902df000ed0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Integrity Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 6621,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"integrity-impact\");",
              "err": {},
              "uuid": "2a6d4cbc-c163-46eb-a80a-4e7d43858cea",
              "parentUUID": "4598a09a-dd44-4806-8164-e902df000ed0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays detailed integrity impacts with high security",
              "fullTitle": "Integrity Impact Widget displays detailed integrity impacts with high security",
              "timedOut": null,
              "duration": 4862,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"integrity-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.HIGH,\n  // High integrity\n  SECURITY_LEVELS.MODERATE\n);\ncy.wait(1e3);\ncy.findWidget(\"integrity-impact\").within(() => {\n  cy.contains(/accuracy|validation|authenticity|correct|trusted/i).should(\n    \"exist\"\n  );\n});",
              "err": {},
              "uuid": "08f7e61f-cf1e-497e-9d52-d7b4a34a9f22",
              "parentUUID": "4598a09a-dd44-4806-8164-e902df000ed0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "provides appropriate integrity recommendations",
              "fullTitle": "Integrity Impact Widget provides appropriate integrity recommendations",
              "timedOut": null,
              "duration": 4817,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"integrity-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.wait(1e3);\ncy.findWidget(\"integrity-impact\").within(() => {\n  cy.contains(/recommend|suggest|practice|implement/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "d7b107f4-4fb6-4f72-8e1e-7581f0e5d00d",
              "parentUUID": "4598a09a-dd44-4806-8164-e902df000ed0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84973938-876c-4d57-9f3d-119b8c67f911",
            "2a6d4cbc-c163-46eb-a80a-4e7d43858cea",
            "08f7e61f-cf1e-497e-9d52-d7b4a34a9f22",
            "d7b107f4-4fb6-4f72-8e1e-7581f0e5d00d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19929,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e99faf25-2051-47bd-b440-53185a0dc8e3",
      "title": "",
      "fullFile": "cypress/e2e/widgets/radar-chart-widget.cy.ts",
      "file": "cypress/e2e/widgets/radar-chart-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "050e27bf-d109-48b7-aecc-0810db0fbaf0",
          "title": "Radar Chart Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "radar-chart widget should exist",
              "fullTitle": "Radar Chart Widget radar-chart widget should exist",
              "timedOut": null,
              "duration": 3616,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "eb709689-f9ba-4170-a83a-fd650fd3c182",
              "parentUUID": "050e27bf-d109-48b7-aecc-0810db0fbaf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates chart visualization when security levels change",
              "fullTitle": "Radar Chart Widget updates chart visualization when security levels change",
              "timedOut": null,
              "duration": 6602,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"radar-chart\");",
              "err": {},
              "uuid": "52132288-36e6-4202-89b8-e60a1379ed2c",
              "parentUUID": "050e27bf-d109-48b7-aecc-0810db0fbaf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays a radar chart with data points",
              "fullTitle": "Radar Chart Widget displays a radar chart with data points",
              "timedOut": null,
              "duration": 3886,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"radar-chart\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"radar-chart\").within(() => {\n  cy.get(\"svg, canvas, [data-testid*='chart'], [class*='chart']\").should(\n    \"exist\"\n  );\n  cy.contains(/availability|integrity|confidentiality/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "6a190179-63ba-4897-a80f-033a41423cc0",
              "parentUUID": "050e27bf-d109-48b7-aecc-0810db0fbaf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays asymmetric chart with mixed security levels",
              "fullTitle": "Radar Chart Widget displays asymmetric chart with mixed security levels",
              "timedOut": null,
              "duration": 8402,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"radar-chart\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"radar-chart\").screenshot(\"mixed-security-radar\");\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"radar-chart\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "b0d0224f-04ab-4135-ba14-74091baf0d0f",
              "parentUUID": "050e27bf-d109-48b7-aecc-0810db0fbaf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays visual security level or risk indicators",
              "fullTitle": "Radar Chart Widget displays visual security level or risk indicators",
              "timedOut": null,
              "duration": 3811,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"radar-chart\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.findWidget(\"radar-chart\").within(() => {\n  cy.contains(/high|5|[4-5]\\/5|\\d+%|strong|robust/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "1eae8372-ca0c-4571-818b-5cae81b4e69f",
              "parentUUID": "050e27bf-d109-48b7-aecc-0810db0fbaf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb709689-f9ba-4170-a83a-fd650fd3c182",
            "52132288-36e6-4202-89b8-e60a1379ed2c",
            "6a190179-63ba-4897-a80f-033a41423cc0",
            "b0d0224f-04ab-4135-ba14-74091baf0d0f",
            "1eae8372-ca0c-4571-818b-5cae81b4e69f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26317,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "aeed6b79-4703-485c-a826-d673d1de981f",
      "title": "",
      "fullFile": "cypress/e2e/widgets/technical-details-widget.cy.ts",
      "file": "cypress/e2e/widgets/technical-details-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "db89d6e6-2714-4d1b-a62c-62243c0fdd60",
          "title": "Technical Details Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "technical-details widget should exist",
              "fullTitle": "Technical Details Widget technical-details widget should exist",
              "timedOut": null,
              "duration": 3646,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "fffab32d-b647-4fde-86b6-12a5c455ecad",
              "parentUUID": "db89d6e6-2714-4d1b-a62c-62243c0fdd60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates technical details when security levels change",
              "fullTitle": "Technical Details Widget updates technical details when security levels change",
              "timedOut": null,
              "duration": 6591,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"technical-details\");",
              "err": {},
              "uuid": "39c0a8ad-0b70-452e-a9f6-670b89f2f667",
              "parentUUID": "db89d6e6-2714-4d1b-a62c-62243c0fdd60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "switches between CIA tabs if present",
              "fullTitle": "Technical Details Widget switches between CIA tabs if present",
              "timedOut": null,
              "duration": 4829,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"technical-details\").scrollIntoView();\ncy.findWidget(\"technical-details\").then(($widget) => {\n  const hasTabs = $widget.find(\n    '[role=\"tab\"], button:contains(\"Availability\"), button:contains(\"Integrity\")'\n  ).length > 0;\n  if (hasTabs) {\n    testWidgetTabSwitching(\"technical-details\");\n  } else {\n    cy.log(\"No tabs found in technical details widget - skipping tab test\");\n  }\n});",
              "err": {},
              "uuid": "82071174-0db6-4da7-9256-38525128d5b7",
              "parentUUID": "db89d6e6-2714-4d1b-a62c-62243c0fdd60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays implementation steps for selected security levels",
              "fullTitle": "Technical Details Widget displays implementation steps for selected security levels",
              "timedOut": null,
              "duration": 3861,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"technical-details\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"technical-details\").within(() => {\n  cy.contains(/implementation|step|instructions|how to|procedure/i).should(\n    \"exist\"\n  );\n  cy.get(\"ol li, ul li, [data-testid*='step'], [class*='step']\").should(\n    \"have.length.at.least\",\n    1\n  );\n});",
              "err": {},
              "uuid": "8ba11a9e-9a7c-461a-acb1-099cc3af3c3c",
              "parentUUID": "db89d6e6-2714-4d1b-a62c-62243c0fdd60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "provides security-appropriate technical recommendations",
              "fullTitle": "Technical Details Widget provides security-appropriate technical recommendations",
              "timedOut": null,
              "duration": 4615,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"technical-details\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.findWidget(\"technical-details\").within(() => {\n  cy.contains(\n    /encryption|authentication|authorization|audit|monitoring|redundancy/i\n  ).should(\"exist\");\n});\ncy.setSecurityLevels(\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.LOW\n);\ncy.findWidget(\"technical-details\").within(() => {\n  cy.contains(/password|backup|update|patch|basic/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "09a722a2-e51e-4c16-a203-71171010ea68",
              "parentUUID": "db89d6e6-2714-4d1b-a62c-62243c0fdd60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fffab32d-b647-4fde-86b6-12a5c455ecad",
            "39c0a8ad-0b70-452e-a9f6-670b89f2f667",
            "82071174-0db6-4da7-9256-38525128d5b7",
            "8ba11a9e-9a7c-461a-acb1-099cc3af3c3c",
            "09a722a2-e51e-4c16-a203-71171010ea68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23542,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ceadbacd-5e5c-428e-94a9-3486ec508129",
      "title": "",
      "fullFile": "cypress/e2e/widgets/technical-implementation-widget.cy.ts",
      "file": "cypress/e2e/widgets/technical-implementation-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "136d2bb0-d8f0-4198-8898-38e2a4168f5f",
          "title": "Technical Implementation Widget Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "shows technical implementation details for security levels",
              "fullTitle": "Technical Implementation Widget Tests shows technical implementation details for security levels",
              "timedOut": null,
              "duration": 1549,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.get('[data-testid=\"technical-details-widget\"]').should(\"exist\").scrollIntoView();\ncy.verifyContentPresent([/technical|implementation|detail/i]);",
              "err": {},
              "uuid": "205f3a86-2cd9-4ea8-b61f-bab0d5e30535",
              "parentUUID": "136d2bb0-d8f0-4198-8898-38e2a4168f5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates implementation details when security levels change",
              "fullTitle": "Technical Implementation Widget Tests updates implementation details when security levels change",
              "timedOut": null,
              "duration": 2273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testWidgetUpdatesWithSecurityLevels(\n  '[data-testid=\"technical-details-widget\"]',\n  {\n    initialLevels: [\n      SECURITY_LEVELS.LOW,\n      SECURITY_LEVELS.LOW,\n      SECURITY_LEVELS.LOW\n    ],\n    newLevels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectTextChange: true\n  }\n);",
              "err": {},
              "uuid": "d94d74a9-8654-4fb9-ab93-60d4b828b3c3",
              "parentUUID": "136d2bb0-d8f0-4198-8898-38e2a4168f5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "allows switching between confidentiality, integrity, and availability sections",
              "fullTitle": "Technical Implementation Widget Tests allows switching between confidentiality, integrity, and availability sections",
              "timedOut": null,
              "duration": 2162,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.get('[data-testid=\"technical-details-widget\"]').scrollIntoView().within(() => {\n  cy.get('[data-testid=\"availability-tab-button\"]').click();\n  cy.wait(300);\n  cy.get('[data-testid=\"integrity-tab-button\"]').click();\n  cy.wait(300);\n  cy.get('[data-testid=\"confidentiality-tab-button\"]').click();\n  cy.wait(300);\n});\ncy.verifyContentPresent([\n  /confidentiality/i,\n  /protection|security|sensitive/i\n]);",
              "err": {},
              "uuid": "feb58690-5508-4f9d-9d58-025609eeef59",
              "parentUUID": "136d2bb0-d8f0-4198-8898-38e2a4168f5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows implementation requirements for different security levels",
              "fullTitle": "Technical Implementation Widget Tests shows implementation requirements for different security levels",
              "timedOut": null,
              "duration": 1051,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.get('[data-testid=\"technical-details-widget\"]').scrollIntoView();\ncy.verifyContentPresent([\n  /requirement|implement|solution|approach/i,\n  /high|advanced|enhanced/i\n]);",
              "err": {},
              "uuid": "487f0ff1-baee-4a88-b212-88222db42ff4",
              "parentUUID": "136d2bb0-d8f0-4198-8898-38e2a4168f5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "205f3a86-2cd9-4ea8-b61f-bab0d5e30535",
            "d94d74a9-8654-4fb9-ab93-60d4b828b3c3",
            "feb58690-5508-4f9d-9d58-025609eeef59",
            "487f0ff1-baee-4a88-b212-88222db42ff4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7035,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}