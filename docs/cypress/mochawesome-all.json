{
  "stats": {
    "suites": 12,
    "tests": 59,
    "passes": 59,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 59,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-03-17T09:36:48.568Z",
    "end": "2025-03-17T09:41:50.905Z",
    "duration": 302337
  },
  "results": [
    {
      "uuid": "04b20e3e-0e12-4a20-935e-9587c3b6eb98",
      "title": "",
      "fullFile": "cypress/e2e/business-outcomes/compliance-validation.cy.ts",
      "file": "cypress/e2e/business-outcomes/compliance-validation.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "49ae83f5-e4fd-48ae-b115-516e1ba2575d",
          "title": "Compliance Status Validation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "accurately reflects compliance status based on security levels",
              "fullTitle": "Compliance Status Validation accurately reflects compliance status based on security levels",
              "timedOut": null,
              "duration": 7646,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.screenshot(\"compliance-validation-start\");\nconst complianceScenarios = [\n  {\n    levels: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    expectedStatus: /minimal|basic|non-compliant|low/i,\n    expectedFrameworks: 0\n  },\n  {\n    levels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectedStatus: /compliant|meets requirements|high/i,\n    expectedFrameworks: 1\n    // Less strict - at least one framework\n  }\n];\ncomplianceScenarios.forEach((scenario, index) => {\n  cy.log(\n    `Testing compliance scenario ${index + 1} with levels: ${scenario.levels.join(\", \")}`\n  );\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(scenario.levels[0], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(1).select(scenario.levels[1], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(2).select(scenario.levels[2], { force: true });\n    } else {\n      cy.setSecurityLevels(...scenario.levels);\n    }\n  });\n  cy.wait(1e3);\n  cy.screenshot(`compliance-scenario-${index + 1}`);\n  cy.get(\"body\").then(($body) => {\n    const selectors = [\n      '[data-testid=\"widget-compliance-status\"]',\n      '[data-testid=\"compliance-status\"]',\n      '[data-testid*=\"compliance\"]',\n      '[class*=\"compliance\"]'\n    ];\n    let foundSelector = \"\";\n    for (const selector of selectors) {\n      if ($body.find(selector).length > 0) {\n        foundSelector = selector;\n        break;\n      }\n    }\n    if (foundSelector) {\n      cy.log(`Found compliance widget with selector: ${foundSelector}`);\n      cy.get(foundSelector).within(() => {\n        cy.contains(scenario.expectedStatus).should(\"exist\");\n        if (scenario.expectedFrameworks > 0) {\n          cy.get(\n            'li, [data-testid*=\"framework-item\"], [data-testid*=\"compliance-item\"]'\n          ).should(\"have.length.at.least\", scenario.expectedFrameworks);\n        }\n      });\n    } else {\n      cy.log(\"⚠️ Compliance widget not found with standard selectors\");\n      cy.contains(scenario.expectedStatus).should(\"exist\");\n    }\n  });\n});",
              "err": {},
              "uuid": "68cebf6a-fc40-4bde-ab8b-2fa78d4321a8",
              "parentUUID": "49ae83f5-e4fd-48ae-b115-516e1ba2575d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "68cebf6a-fc40-4bde-ab8b-2fa78d4321a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7646,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c66d385e-ad17-4ccb-b304-2e3cf5ee2f1f",
      "title": "",
      "fullFile": "cypress/e2e/security/security-level-transitions.cy.ts",
      "file": "cypress/e2e/security/security-level-transitions.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "05b2912a-842c-4fe7-a3d1-2348bd7c6ccf",
          "title": "Security Level Transitions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "maintains application integrity during security level changes",
              "fullTitle": "Security Level Transitions maintains application integrity during security level changes",
              "timedOut": null,
              "duration": 11672,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const securityTransitions = [\n  // Test dramatic change (low to high)\n  {\n    from: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    to: [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH]\n  },\n  // Test mixed security levels\n  {\n    from: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    to: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.LOW,\n      SECURITY_LEVELS.MODERATE\n    ]\n  }\n];\nfor (const transition of securityTransitions) {\n  cy.log(`Testing transition from ${transition.from} to ${transition.to}`);\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(transition.from[0], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(1).select(transition.from[1], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(2).select(transition.from[2], { force: true });\n    } else {\n      cy.setSecurityLevels(...transition.from);\n    }\n  });\n  cy.wait(1e3);\n  cy.screenshot(`transition-initial-${transition.from.join(\"-\")}`);\n  cy.log(\"Verifying initial widget state\");\n  let initialWidgetFound = false;\n  cy.get(\"body\").then(($body) => {\n    const summarySelectors = [\n      '[data-testid=\"widget-security-summary\"]',\n      '[data-testid=\"security-summary\"]',\n      '[data-testid*=\"security\"][data-testid*=\"summary\"]'\n    ];\n    for (const selector of summarySelectors) {\n      if ($body.find(selector).length > 0) {\n        initialWidgetFound = true;\n        cy.log(`Found security summary with selector: ${selector}`);\n        cy.get(selector).should(\"exist\").as(\"securitySummary\");\n        break;\n      }\n    }\n    if (!initialWidgetFound) {\n      cy.log(\"⚠️ Could not find security summary widget\");\n      cy.get(\"body\").as(\"securitySummary\");\n    }\n  });\n  cy.get(\"body\").should(\"not.contain.text\", \"undefined\");\n  cy.get(\"body\").should(\"not.contain.text\", \"NaN\");\n  cy.get(\"body\").invoke(\"text\").as(\"initialBodyText\");\n  cy.log(`Changing to security levels: ${transition.to}`);\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(transition.to[0], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(1).select(transition.to[1], { force: true });\n      cy.wait(300);\n      cy.get(\"select\").eq(2).select(transition.to[2], { force: true });\n    } else {\n      cy.setSecurityLevels(...transition.to);\n    }\n  });\n  cy.wait(1e3);\n  cy.screenshot(`transition-after-${transition.to.join(\"-\")}`);\n  if (initialWidgetFound) {\n    cy.get(\"@securitySummary\").should(\"exist\");\n  }\n  cy.get(\"body\").invoke(\"text\").then((newBodyText) => {\n    cy.get(\"@initialBodyText\").then((initialBodyText) => {\n      if (newBodyText !== initialBodyText) {\n        cy.log(\"✓ Page content changed after security level transition\");\n      } else {\n        cy.log(\"⚠️ Page content did not change after transition\");\n      }\n    });\n  });\n  cy.get(\"body\").should(\"not.contain.text\", \"undefined\");\n  cy.get(\"body\").should(\"not.contain.text\", \"NaN\");\n  cy.get(\"body\").should(\"not.contain.text\", \"Error\");\n  cy.window().then((win) => {\n    if (win.consoleErrors && win.consoleErrors.length > 0) {\n      cy.log(`⚠️ Console errors found: ${win.consoleErrors.length}`);\n      win.consoleErrors.forEach((err, i) => {\n        if (i < 3) {\n          cy.log(`Error ${i + 1}: ${err.substring(0, 100)}...`);\n        }\n      });\n    } else {\n      cy.log(\"✓ No console errors detected\");\n    }\n  });\n}",
              "err": {},
              "uuid": "dbf07d4c-2141-4d2d-875c-82e07cf3dec2",
              "parentUUID": "05b2912a-842c-4fe7-a3d1-2348bd7c6ccf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbf07d4c-2141-4d2d-875c-82e07cf3dec2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11672,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fbae7ae8-d0c0-4d05-898a-701a02e1efd7",
      "title": "",
      "fullFile": "cypress/e2e/widgets/all-widgets-security-test.cy.ts",
      "file": "cypress/e2e/widgets/all-widgets-security-test.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
          "title": "All Widgets Security Level Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "handles key security combinations for security-summary",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for security-summary",
              "timedOut": null,
              "duration": 5919,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "eb24c758-834a-4007-8fdb-f8702a0f903f",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for business-impact",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for business-impact",
              "timedOut": null,
              "duration": 5259,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "805a4c9d-6dee-4be1-96b2-6cd828e86a8c",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for cost-estimation",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for cost-estimation",
              "timedOut": null,
              "duration": 5077,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "8173cad3-d646-493a-87c5-3dbd4526466b",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles key security combinations for compliance-status",
              "fullTitle": "All Widgets Security Level Tests handles key security combinations for compliance-status",
              "timedOut": null,
              "duration": 5089,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const widgetExists = $body.find(`[data-testid*=\"${widget}\"]`).length > 0;\n  if (!widgetExists) {\n    cy.log(\n      `⚠️ WARNING: Widget \"${widget}\" not found - skipping security level tests`\n    );\n    return;\n  }\n  cy.findWidget(widget).scrollIntoView();\n  const hasSelects = $body.find(\"select\").length >= 3;\n  if (!hasSelects) {\n    cy.log(\n      \"⚠️ WARNING: Not enough select elements found to set security levels\"\n    );\n    return;\n  }\n  criticalCombinations.forEach(([avail, integ, conf]) => {\n    cy.log(`Testing ${avail}-${integ}-${conf} combination`);\n    cy.get(\"body\").then(($updated) => {\n      const selects = $updated.find(\"select\");\n      if (selects.length >= 3) {\n        cy.get(\"select\").eq(0).select(avail, { force: true });\n        cy.get(\"select\").eq(1).select(integ, { force: true });\n        cy.get(\"select\").eq(2).select(conf, { force: true });\n      } else {\n        cy.setSecurityLevels(avail, integ, conf);\n      }\n    });\n    cy.wait(300);\n    cy.findWidget(widget).should(\"exist\").should(\"be.visible\").then(($widget) => {\n      expect($widget.text().trim().length).to.be.greaterThan(0);\n    });\n  });\n});",
              "err": {},
              "uuid": "497ec19b-b020-4d93-a20f-43de8ff0243f",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for security-summary widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for security-summary widget",
              "timedOut": null,
              "duration": 4059,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "01fe7391-830c-4408-8714-146bf52ca7e9",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for radar-chart widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for radar-chart widget",
              "timedOut": null,
              "duration": 4037,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "84ccd809-374e-48a3-9d8a-da6b95199e98",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles security level transitions smoothly for compliance-status widget",
              "fullTitle": "All Widgets Security Level Tests handles security level transitions smoothly for compliance-status widget",
              "timedOut": null,
              "duration": 4075,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).scrollIntoView();\nconst transitionSequence = [\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n  [SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.HIGH],\n  [\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE,\n    SECURITY_LEVELS.MODERATE\n  ],\n  [SECURITY_LEVELS.LOW, SECURITY_LEVELS.HIGH, SECURITY_LEVELS.MODERATE]\n];\ntransitionSequence.forEach(([avail, integ, conf], index) => {\n  cy.log(`Testing transition ${index + 1}: ${avail}, ${integ}, ${conf}`);\n  cy.setSecurityLevels(avail, integ, conf);\n  cy.wait(100);\n  cy.findWidget(widgetName).should(\"exist\");\n});\ncy.findWidget(widgetName).should(\"be.visible\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "bba7c709-73de-4a36-8b46-a59761c5b299",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows appropriate widgets for each security profile",
              "fullTitle": "All Widgets Security Level Tests shows appropriate widgets for each security profile",
              "timedOut": null,
              "duration": 3207,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const securityProfiles = [\n  {\n    name: \"None/Low Security\",\n    levels: [SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW, SECURITY_LEVELS.LOW],\n    expectedWidgets: [\n      \"security-summary\",\n      \"security-level\",\n      \"cost-estimation\"\n    ],\n    unexpectedWidgets: [\"cia-impact-summary\", \"radar-chart\"]\n    // These might not be visible at low security\n  },\n  {\n    name: \"High Security\",\n    levels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectedWidgets: [\n      \"security-summary\",\n      \"security-level\",\n      \"cost-estimation\",\n      \"value-creation\",\n      \"business-impact\",\n      \"compliance-status\"\n    ],\n    unexpectedWidgets: []\n    // At high security, most widgets should be visible\n  }\n];\nsecurityProfiles.forEach((profile) => {\n  cy.log(`Testing ${profile.name} profile`);\n  cy.setSecurityLevels(...profile.levels);\n  cy.wait(500);\n  profile.expectedWidgets.forEach((widgetId) => {\n    cy.findWidget(widgetId).should(\"exist\");\n  });\n  if (profile.unexpectedWidgets.length > 0) {\n    cy.log(\n      `Note: Some widgets may not be visible in ${profile.name} profile`\n    );\n  }\n});",
              "err": {},
              "uuid": "c99c9a13-9333-461e-8bd5-e133f87b975d",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "handles extreme security transitions without errors",
              "fullTitle": "All Widgets Security Level Tests handles extreme security transitions without errors",
              "timedOut": null,
              "duration": 2918,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.NONE,\n  SECURITY_LEVELS.NONE,\n  SECURITY_LEVELS.NONE\n);\ncy.wait(300);\ncy.window().then((win) => {\n  win.consoleErrors = [];\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.VERY_HIGH,\n    SECURITY_LEVELS.VERY_HIGH,\n    SECURITY_LEVELS.VERY_HIGH\n  );\n  cy.wait(500);\n  cy.wrap(win.consoleErrors || []).should(\"have.length.lessThan\", 3);\n});",
              "err": {},
              "uuid": "519905d6-af1c-480d-b13f-6d6c7709b09d",
              "parentUUID": "5c9461d3-3c38-44b6-8a52-6968ee155e8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb24c758-834a-4007-8fdb-f8702a0f903f",
            "805a4c9d-6dee-4be1-96b2-6cd828e86a8c",
            "8173cad3-d646-493a-87c5-3dbd4526466b",
            "497ec19b-b020-4d93-a20f-43de8ff0243f",
            "01fe7391-830c-4408-8714-146bf52ca7e9",
            "84ccd809-374e-48a3-9d8a-da6b95199e98",
            "bba7c709-73de-4a36-8b46-a59761c5b299",
            "c99c9a13-9333-461e-8bd5-e133f87b975d",
            "519905d6-af1c-480d-b13f-6d6c7709b09d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39640,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "69ec49be-2031-49f7-b77e-1c474df5741b",
      "title": "",
      "fullFile": "cypress/e2e/widgets/availability-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/availability-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0373b533-f04f-47e1-a5ab-290bf1c6ffe8",
          "title": "Availability Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays availability impact analysis",
              "fullTitle": "Availability Impact Widget displays availability impact analysis",
              "timedOut": null,
              "duration": 1598,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const selectors = [\n    '[data-testid*=\"availability-impact\"]',\n    '[data-testid=\"widget-availability-impact-container\"]',\n    '[data-testid=\"widget-availability-impact\"]',\n    '[class*=\"availability-impact\"]'\n  ];\n  let foundSelector = false;\n  for (const selector of selectors) {\n    if ($body.find(selector).length > 0) {\n      cy.log(`Found availability widget with selector: ${selector}`);\n      cy.get(selector).should(\"exist\").scrollIntoView().should(\"be.visible\");\n      foundSelector = true;\n      break;\n    }\n  }\n  if (!foundSelector) {\n    cy.log(\n      \"⚠️ Could not find availability impact widget with standard selectors\"\n    );\n    return;\n  }\n  cy.verifyContentPresent([\n    /availability|uptime|recovery/i,\n    /impact|effect|consequence/i\n  ]);\n});",
              "err": {},
              "uuid": "6c4bf737-4296-419a-a6b2-9e46310d6ffb",
              "parentUUID": "0373b533-f04f-47e1-a5ab-290bf1c6ffe8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Availability Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 2967,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"availability-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  const initialContent = $widget.text();\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.LOW, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW\n      );\n    }\n  });\n  cy.wait(500);\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.HIGH, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH\n      );\n    }\n  });\n  cy.wait(500);\n  cy.findWidget(\"availability-impact\").invoke(\"text\").then((newContent) => {\n    cy.log(`Initial content length: ${initialContent.length}`);\n    cy.log(`New content length: ${newContent.length}`);\n  });\n});",
              "err": {},
              "uuid": "397a2222-d85e-4da7-901d-d1ac4da4392c",
              "parentUUID": "0373b533-f04f-47e1-a5ab-290bf1c6ffe8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows technical metrics and recommendations",
              "fullTitle": "Availability Impact Widget shows technical metrics and recommendations",
              "timedOut": null,
              "duration": 2184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"availability-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.MODERATE, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.MODERATE, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.MODERATE, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.MODERATE,\n        SECURITY_LEVELS.MODERATE,\n        SECURITY_LEVELS.MODERATE\n      );\n    }\n  });\n  cy.wait(500);\n  cy.log(\"Checking for availability metrics terminology\");\n  cy.get(\"body\").contains(/rto|rpo|mttr|uptime/i);\n  cy.log(\"Checking for recommendation terminology\");\n  cy.get(\"body\").contains(/recommend|suggest/i);\n});",
              "err": {},
              "uuid": "f53b94d1-06ec-4ae1-8404-c4e9e01c258d",
              "parentUUID": "0373b533-f04f-47e1-a5ab-290bf1c6ffe8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays business impact information",
              "fullTitle": "Availability Impact Widget displays business impact information",
              "timedOut": null,
              "duration": 2331,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"availability-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    const selectCount = $body.find(\"select\").length;\n    if (selectCount >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.MODERATE, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.LOW, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.MODERATE,\n        SECURITY_LEVELS.LOW\n      );\n    }\n  });\n  cy.wait(500);\n  cy.contains(/business impact|effect on business|operational impact/i);\n});",
              "err": {},
              "uuid": "71ddf445-2860-4b80-9526-a6f01fb32a08",
              "parentUUID": "0373b533-f04f-47e1-a5ab-290bf1c6ffe8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c4bf737-4296-419a-a6b2-9e46310d6ffb",
            "397a2222-d85e-4da7-901d-d1ac4da4392c",
            "f53b94d1-06ec-4ae1-8404-c4e9e01c258d",
            "71ddf445-2860-4b80-9526-a6f01fb32a08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9080,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8d922391-7c5f-46a5-8968-8dda937768bc",
      "title": "",
      "fullFile": "cypress/e2e/widgets/business-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/business-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ed69b2aa-b97f-4590-aa55-65e9bb9badfb",
          "title": "Business Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display the business impact widget",
              "fullTitle": "Business Impact Widget should display the business impact widget",
              "timedOut": null,
              "duration": 1512,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"body\").then(($body) => {\n  const selectors = [\n    '[data-testid=\"widget-business-impact-container\"]',\n    '[data-testid=\"business-impact-widget\"]',\n    '[data-testid*=\"business-impact\"]',\n    '[class*=\"business-impact\"]'\n  ];\n  let found = false;\n  for (const selector of selectors) {\n    if ($body.find(selector).length > 0) {\n      cy.get(selector).should(\"exist\").and(\"be.visible\");\n      found = true;\n      break;\n    }\n  }\n  if (!found) {\n    cy.log(\"⚠️ Business impact widget not found with standard selectors\");\n  }\n});",
              "err": {},
              "uuid": "76a5fd8b-605e-42d7-86fd-6fd7e91e02f3",
              "parentUUID": "ed69b2aa-b97f-4590-aa55-65e9bb9badfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Business Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 2892,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const initialContent = $widget.text();\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.LOW, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.LOW\n      );\n    }\n  });\n  cy.wait(500);\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.HIGH, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH\n      );\n    }\n  });\n  cy.wait(500);\n  cy.findWidget(\"business-impact\").invoke(\"text\").then((newContent) => {\n    if (newContent !== initialContent) {\n      cy.log(\n        \"✅ Content changed as expected after security level change\"\n      );\n    } else {\n      cy.log(\"⚠️ Content did not change after security level change\");\n    }\n  });\n});",
              "err": {},
              "uuid": "1cc182e1-0734-4182-9911-aef683eb86ec",
              "parentUUID": "ed69b2aa-b97f-4590-aa55-65e9bb9badfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "has functioning CIA tab navigation",
              "fullTitle": "Business Impact Widget has functioning CIA tab navigation",
              "timedOut": null,
              "duration": 1721,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const tabSelectors = [\n    'button, [role=\"tab\"]',\n    'button:contains(\"Availability\"), button:contains(\"Integrity\"), button:contains(\"Confidentiality\")'\n  ];\n  let tabsFound = false;\n  for (const selector of tabSelectors) {\n    const $tabs = $widget.find(selector);\n    if ($tabs.length >= 2) {\n      tabsFound = true;\n      cy.log(`Found ${$tabs.length} tabs with selector: ${selector}`);\n      cy.wrap($widget).find(selector).each(($tab, index) => {\n        if (index > 0 && index < 3) {\n          cy.log(`Clicking tab ${index}`);\n          cy.wrap($tab).click({ force: true });\n          cy.wait(300);\n        }\n      });\n      break;\n    }\n  }\n  if (!tabsFound) {\n    cy.log(\n      \"⚠️ No tabs found in business impact widget - this might be expected if the widget doesn't use tabs\"\n    );\n  }\n});",
              "err": {},
              "uuid": "95f32176-f59e-467f-af7f-634bbb168a8e",
              "parentUUID": "ed69b2aa-b97f-4590-aa55-65e9bb9badfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate impact cards for high security",
              "fullTitle": "Business Impact Widget displays appropriate impact cards for high security",
              "timedOut": null,
              "duration": 2197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.HIGH, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.HIGH\n      );\n    }\n  });\n  cy.wait(500);\n  cy.wrap($widget).within(() => {\n    cy.contains(/impact|effect|consequence/i).should(\"exist\");\n    cy.contains(/financial|revenue|cost/i).should(\"exist\");\n    cy.contains(/operational|process|function/i).should(\"exist\");\n  });\n});",
              "err": {},
              "uuid": "c4a3fb3b-1c85-4f13-a8e6-96e6d0a6f1f1",
              "parentUUID": "ed69b2aa-b97f-4590-aa55-65e9bb9badfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows different impacts for mixed security levels",
              "fullTitle": "Business Impact Widget shows different impacts for mixed security levels",
              "timedOut": null,
              "duration": 2004,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"business-impact\").then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(\"⚠️ Widget not found - skipping test\");\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.get(\"body\").then(($body) => {\n    if ($body.find(\"select\").length >= 3) {\n      cy.get(\"select\").eq(0).select(SECURITY_LEVELS.HIGH, { force: true });\n      cy.get(\"select\").eq(1).select(SECURITY_LEVELS.LOW, { force: true });\n      cy.get(\"select\").eq(2).select(SECURITY_LEVELS.MODERATE, { force: true });\n    } else {\n      cy.setSecurityLevels(\n        SECURITY_LEVELS.HIGH,\n        SECURITY_LEVELS.LOW,\n        SECURITY_LEVELS.MODERATE\n      );\n    }\n  });\n  cy.wait(500);\n  cy.wrap($widget).invoke(\"text\").then((text) => {\n    const patterns = [\n      /availability|integrity|confidentiality/i,\n      /impact|effect|consequence/i,\n      /business|operation|financial/i\n    ];\n    const matchingPatterns = patterns.filter(\n      (pattern) => pattern.test(text)\n    );\n    cy.log(\n      `Found ${matchingPatterns.length} matching patterns in widget`\n    );\n    expect(matchingPatterns.length).to.be.greaterThan(0);\n  });\n});",
              "err": {},
              "uuid": "cddf4649-9182-4df6-8c75-249874765b0a",
              "parentUUID": "ed69b2aa-b97f-4590-aa55-65e9bb9badfb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76a5fd8b-605e-42d7-86fd-6fd7e91e02f3",
            "1cc182e1-0734-4182-9911-aef683eb86ec",
            "95f32176-f59e-467f-af7f-634bbb168a8e",
            "c4a3fb3b-1c85-4f13-a8e6-96e6d0a6f1f1",
            "cddf4649-9182-4df6-8c75-249874765b0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10326,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ce86a4e3-f7a4-4a3c-af5f-3313d2a7dfc8",
      "title": "",
      "fullFile": "cypress/e2e/widgets/cia-impact-summary-widget.cy.ts",
      "file": "cypress/e2e/widgets/cia-impact-summary-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bd913324-e15a-4d3f-b375-193a28619c5e",
          "title": "CIA Impact Summary Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cia-impact-summary widget should exist",
              "fullTitle": "CIA Impact Summary Widget cia-impact-summary widget should exist",
              "timedOut": null,
              "duration": 4123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "fc0125a8-4e94-4381-8cc0-fa8f3c8fcab5",
              "parentUUID": "bd913324-e15a-4d3f-b375-193a28619c5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "CIA Impact Summary Widget updates content when security levels change",
              "timedOut": null,
              "duration": 7458,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"cia-impact-summary\");",
              "err": {},
              "uuid": "b91cc3ef-f056-46e4-a222-e9fdeee66234",
              "parentUUID": "bd913324-e15a-4d3f-b375-193a28619c5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows comprehensive CIA impact summary at high security levels",
              "fullTitle": "CIA Impact Summary Widget shows comprehensive CIA impact summary at high security levels",
              "timedOut": null,
              "duration": 5251,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"cia-impact-summary\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.wait(1e3);\ncy.findWidget(\"cia-impact-summary\").then(($widget) => {\n  const text = $widget.text().toLowerCase();\n  const hasAvailabilityTerms = /availability|uptime|recovery|access/i.test(\n    text\n  );\n  const hasIntegrityTerms = /integrity|accuracy|valid|correct/i.test(text);\n  const hasConfidentialTerms = /confidential|privacy|sensitive|secret/i.test(text);\n  cy.log(`Found availability terms: ${hasAvailabilityTerms}`);\n  cy.log(`Found integrity terms: ${hasIntegrityTerms}`);\n  cy.log(`Found confidentiality terms: ${hasConfidentialTerms}`);\n  expect(hasAvailabilityTerms || hasIntegrityTerms || hasConfidentialTerms).to.be.true;\n});",
              "err": {},
              "uuid": "52133b77-f0bd-402b-b65b-021056d65eb3",
              "parentUUID": "bd913324-e15a-4d3f-b375-193a28619c5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "properly displays mixed security levels",
              "fullTitle": "CIA Impact Summary Widget properly displays mixed security levels",
              "timedOut": null,
              "duration": 7065,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"cia-impact-summary\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.MODERATE\n);\ncy.wait(1e3);\ncy.findWidget(\"cia-impact-summary\").then(($widgetBefore) => {\n  const textBefore = $widgetBefore.text();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.LOW,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.LOW\n  );\n  cy.wait(1e3);\n  cy.findWidget(\"cia-impact-summary\").then(($widgetAfter) => {\n    const textAfter = $widgetAfter.text();\n    expect(textAfter).not.to.equal(textBefore);\n  });\n});",
              "err": {},
              "uuid": "1840ba4b-ee86-4fdb-a74f-e19032f89867",
              "parentUUID": "bd913324-e15a-4d3f-b375-193a28619c5e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc0125a8-4e94-4381-8cc0-fa8f3c8fcab5",
            "b91cc3ef-f056-46e4-a222-e9fdeee66234",
            "52133b77-f0bd-402b-b65b-021056d65eb3",
            "1840ba4b-ee86-4fdb-a74f-e19032f89867"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23897,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5949e18f-7706-4262-9bb7-59955cac392e",
      "title": "",
      "fullFile": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "file": "cypress/e2e/widgets/cia-impact-widgets.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3df6189-41a8-4064-b851-3361b84bed6d",
          "title": "Availability Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "availability-impact widget should exist",
              "fullTitle": "Availability Impact Widget availability-impact widget should exist",
              "timedOut": null,
              "duration": 3918,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "f917e4f3-4f53-4dd7-82eb-35baf09f52c2",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Availability Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 7130,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "a38ba348-8621-4d2d-a816-dc2e0ec49d69",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Availability Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 5200,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "8c23d882-90a5-4382-b94a-992136a20bca",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Availability Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 5070,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "0b9ed219-9361-44a2-86af-352c5d7bf0b0",
              "parentUUID": "a3df6189-41a8-4064-b851-3361b84bed6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f917e4f3-4f53-4dd7-82eb-35baf09f52c2",
            "a38ba348-8621-4d2d-a816-dc2e0ec49d69",
            "8c23d882-90a5-4382-b94a-992136a20bca",
            "0b9ed219-9361-44a2-86af-352c5d7bf0b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
          "title": "Integrity Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "integrity-impact widget should exist",
              "fullTitle": "Integrity Impact Widget integrity-impact widget should exist",
              "timedOut": null,
              "duration": 3575,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "141707c6-5d9f-4112-9b0a-2dc2e85138a0",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Integrity Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 7018,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "10c6eb62-1bba-4fa1-af19-0d2318df6877",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Integrity Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 5216,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "b4709cc2-5290-4325-a8f7-2f9f2ca7fe10",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Integrity Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 5154,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "148da0e6-16fe-44e3-80c3-1071583fca7d",
              "parentUUID": "172f3c39-6d1f-4f5c-881c-12a2764e8496",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "141707c6-5d9f-4112-9b0a-2dc2e85138a0",
            "10c6eb62-1bba-4fa1-af19-0d2318df6877",
            "b4709cc2-5290-4325-a8f7-2f9f2ca7fe10",
            "148da0e6-16fe-44e3-80c3-1071583fca7d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20963,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "11b55b79-95e7-4605-9eba-c503e90af367",
          "title": "Confidentiality Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "confidentiality-impact widget should exist",
              "fullTitle": "Confidentiality Impact Widget confidentiality-impact widget should exist",
              "timedOut": null,
              "duration": 3513,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "a599c820-393a-4ec4-9b99-77202092cbe4",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates impact assessments when security levels change",
              "fullTitle": "Confidentiality Impact Widget updates impact assessments when security levels change",
              "timedOut": null,
              "duration": 7077,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(widget.id);",
              "err": {},
              "uuid": "986fa883-031f-4864-9c41-291858945f96",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows detailed ${widget.name.toLowerCase()} impact with high security",
              "fullTitle": "Confidentiality Impact Widget shows detailed ${widget.name.toLowerCase()} impact with high security",
              "timedOut": null,
              "duration": 5219,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Looking for widget ${widget.id}`);\ncy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  const availLevel = widget.id === \"availability-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const intLevel = widget.id === \"integrity-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  const confLevel = widget.id === \"confidentiality-impact\" ? SECURITY_LEVELS.HIGH : SECURITY_LEVELS.MODERATE;\n  cy.setSecurityLevels(availLevel, intLevel, confLevel);\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasImpactTerms = /impact|effect|influence|security|protection/i.test(widgetText);\n    let hasSpecificTerms = false;\n    if (Array.isArray(widget.pattern)) {\n      hasSpecificTerms = widget.pattern.some(\n        (pattern) => pattern.test(widgetText)\n      );\n    } else if (widget.pattern instanceof RegExp) {\n      hasSpecificTerms = widget.pattern.test(widgetText);\n    }\n    cy.log(`Widget has impact terms: ${hasImpactTerms}`);\n    cy.log(`Widget has specific terms: ${hasSpecificTerms}`);\n    expect(hasImpactTerms || hasSpecificTerms).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "ee654fd5-96fe-40f0-aac6-7ff7bf38b63b",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays appropriate recommendations",
              "fullTitle": "Confidentiality Impact Widget displays appropriate recommendations",
              "timedOut": null,
              "duration": 5102,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widget.id).then(($widget) => {\n  if ($widget.length === 0) {\n    cy.log(`⚠️ Widget ${widget.id} not found - skipping test`);\n    return;\n  }\n  cy.wrap($widget).scrollIntoView();\n  cy.setSecurityLevels(\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH,\n    SECURITY_LEVELS.HIGH\n  );\n  cy.wait(1e3);\n  cy.wrap($widget).then(($updatedWidget) => {\n    const widgetText = $updatedWidget.text().toLowerCase();\n    const hasRecommendationTerms = /recommend|suggest|should|implement|consider|best practice/i.test(\n      widgetText\n    );\n    cy.log(`Widget has recommendation terms: ${hasRecommendationTerms}`);\n    if (!hasRecommendationTerms) {\n      cy.log(`Widget text: ${widgetText.substring(0, 200)}...`);\n    }\n    cy.log(`Test completed for ${widget.name}`);\n  });\n});",
              "err": {},
              "uuid": "fda2334a-8950-46f3-8ded-d7ade736cad7",
              "parentUUID": "11b55b79-95e7-4605-9eba-c503e90af367",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a599c820-393a-4ec4-9b99-77202092cbe4",
            "986fa883-031f-4864-9c41-291858945f96",
            "ee654fd5-96fe-40f0-aac6-7ff7bf38b63b",
            "fda2334a-8950-46f3-8ded-d7ade736cad7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20911,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a8965bf5-b11c-4249-9802-57a84430ca36",
      "title": "",
      "fullFile": "cypress/e2e/widgets/confidentiality-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/confidentiality-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8683c3fb-8128-4d25-8b24-2af2061c03c8",
          "title": "Confidentiality Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "confidentiality-impact widget should exist",
              "fullTitle": "Confidentiality Impact Widget confidentiality-impact widget should exist",
              "timedOut": null,
              "duration": 3863,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "6b956922-c820-4ee7-8dd7-612c2967c42c",
              "parentUUID": "8683c3fb-8128-4d25-8b24-2af2061c03c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Confidentiality Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 7006,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"confidentiality-impact\");",
              "err": {},
              "uuid": "90667a08-320e-448c-a571-b9e3848dd97b",
              "parentUUID": "8683c3fb-8128-4d25-8b24-2af2061c03c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays detailed confidentiality impacts with high security",
              "fullTitle": "Confidentiality Impact Widget displays detailed confidentiality impacts with high security",
              "timedOut": null,
              "duration": 5144,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"confidentiality-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.HIGH\n  // High confidentiality\n);\ncy.wait(1e3);\ncy.findWidget(\"confidentiality-impact\").within(() => {\n  cy.contains(\n    /privacy|data protection|sensitive|confidential|encrypt/i\n  ).should(\"exist\");\n});",
              "err": {},
              "uuid": "9a37ddcc-219c-48cc-a829-9bc22d3a877f",
              "parentUUID": "8683c3fb-8128-4d25-8b24-2af2061c03c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "provides appropriate confidentiality recommendations",
              "fullTitle": "Confidentiality Impact Widget provides appropriate confidentiality recommendations",
              "timedOut": null,
              "duration": 5035,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"confidentiality-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.wait(1e3);\ncy.findWidget(\"confidentiality-impact\").within(() => {\n  cy.contains(/recommend|suggest|practice|implement/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "bc28f57f-8e42-4da6-9f28-8076a01496bd",
              "parentUUID": "8683c3fb-8128-4d25-8b24-2af2061c03c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b956922-c820-4ee7-8dd7-612c2967c42c",
            "90667a08-320e-448c-a571-b9e3848dd97b",
            "9a37ddcc-219c-48cc-a829-9bc22d3a877f",
            "bc28f57f-8e42-4da6-9f28-8076a01496bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21048,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e44768d5-d78a-4d84-8b2f-1a96a80e3146",
      "title": "",
      "fullFile": "cypress/e2e/widgets/integrity-impact-widget.cy.ts",
      "file": "cypress/e2e/widgets/integrity-impact-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "38286219-b60c-4aca-baf4-b5dfa6c91a4a",
          "title": "Integrity Impact Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "integrity-impact widget should exist",
              "fullTitle": "Integrity Impact Widget integrity-impact widget should exist",
              "timedOut": null,
              "duration": 3913,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "1aa951d3-6d6d-4488-9744-364c774beb9f",
              "parentUUID": "38286219-b60c-4aca-baf4-b5dfa6c91a4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates content when security levels change",
              "fullTitle": "Integrity Impact Widget updates content when security levels change",
              "timedOut": null,
              "duration": 7029,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"integrity-impact\");",
              "err": {},
              "uuid": "5d9e3ce9-422b-4315-8d0b-0376c9bf12a5",
              "parentUUID": "38286219-b60c-4aca-baf4-b5dfa6c91a4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays detailed integrity impacts with high security",
              "fullTitle": "Integrity Impact Widget displays detailed integrity impacts with high security",
              "timedOut": null,
              "duration": 5160,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"integrity-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.HIGH,\n  // High integrity\n  SECURITY_LEVELS.MODERATE\n);\ncy.wait(1e3);\ncy.findWidget(\"integrity-impact\").within(() => {\n  cy.contains(/accuracy|validation|authenticity|correct|trusted/i).should(\n    \"exist\"\n  );\n});",
              "err": {},
              "uuid": "8eaa8499-11e7-4e34-8865-7ed0626bff9e",
              "parentUUID": "38286219-b60c-4aca-baf4-b5dfa6c91a4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "provides appropriate integrity recommendations",
              "fullTitle": "Integrity Impact Widget provides appropriate integrity recommendations",
              "timedOut": null,
              "duration": 5111,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"integrity-impact\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.wait(1e3);\ncy.findWidget(\"integrity-impact\").within(() => {\n  cy.contains(/recommend|suggest|practice|implement/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "da1c6f85-4fd8-484b-89da-26d5d49203fe",
              "parentUUID": "38286219-b60c-4aca-baf4-b5dfa6c91a4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1aa951d3-6d6d-4488-9744-364c774beb9f",
            "5d9e3ce9-422b-4315-8d0b-0376c9bf12a5",
            "8eaa8499-11e7-4e34-8865-7ed0626bff9e",
            "da1c6f85-4fd8-484b-89da-26d5d49203fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21213,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e7313e93-7e4c-4387-951c-7e76b574bdba",
      "title": "",
      "fullFile": "cypress/e2e/widgets/radar-chart-widget.cy.ts",
      "file": "cypress/e2e/widgets/radar-chart-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "290bae26-2c05-4517-b77e-247e21746e7c",
          "title": "Radar Chart Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "radar-chart widget should exist",
              "fullTitle": "Radar Chart Widget radar-chart widget should exist",
              "timedOut": null,
              "duration": 3994,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "7de694d7-31e5-437e-a9f3-8d590220754b",
              "parentUUID": "290bae26-2c05-4517-b77e-247e21746e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates chart visualization when security levels change",
              "fullTitle": "Radar Chart Widget updates chart visualization when security levels change",
              "timedOut": null,
              "duration": 7102,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"radar-chart\");",
              "err": {},
              "uuid": "8169f585-90ef-4dae-ab19-889573d54cc9",
              "parentUUID": "290bae26-2c05-4517-b77e-247e21746e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays a radar chart with data points",
              "fullTitle": "Radar Chart Widget displays a radar chart with data points",
              "timedOut": null,
              "duration": 4323,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"radar-chart\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"radar-chart\").within(() => {\n  cy.get(\"svg, canvas, [data-testid*='chart'], [class*='chart']\").should(\n    \"exist\"\n  );\n  cy.contains(/availability|integrity|confidentiality/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "06b68dac-7567-4ab0-bbf5-8d0f82a3d167",
              "parentUUID": "290bae26-2c05-4517-b77e-247e21746e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays asymmetric chart with mixed security levels",
              "fullTitle": "Radar Chart Widget displays asymmetric chart with mixed security levels",
              "timedOut": null,
              "duration": 7297,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"radar-chart\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"radar-chart\").screenshot(\"mixed-security-radar\");\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"radar-chart\").invoke(\"text\").should(\"not.be.empty\");",
              "err": {},
              "uuid": "60e8620f-3140-4d82-91be-e455f5556c4f",
              "parentUUID": "290bae26-2c05-4517-b77e-247e21746e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays visual security level or risk indicators",
              "fullTitle": "Radar Chart Widget displays visual security level or risk indicators",
              "timedOut": null,
              "duration": 4093,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"radar-chart\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.findWidget(\"radar-chart\").within(() => {\n  cy.contains(/high|5|[4-5]\\/5|\\d+%|strong|robust/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "768b51f4-e5ef-4219-b31b-5265ab4f39f7",
              "parentUUID": "290bae26-2c05-4517-b77e-247e21746e7c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7de694d7-31e5-437e-a9f3-8d590220754b",
            "8169f585-90ef-4dae-ab19-889573d54cc9",
            "06b68dac-7567-4ab0-bbf5-8d0f82a3d167",
            "60e8620f-3140-4d82-91be-e455f5556c4f",
            "768b51f4-e5ef-4219-b31b-5265ab4f39f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26809,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "868b3691-e802-43f2-8bea-14bcfd135244",
      "title": "",
      "fullFile": "cypress/e2e/widgets/technical-details-widget.cy.ts",
      "file": "cypress/e2e/widgets/technical-details-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "39a3b0ab-1c75-40af-bb17-225756ff80d7",
          "title": "Technical Details Widget",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "technical-details widget should exist",
              "fullTitle": "Technical Details Widget technical-details widget should exist",
              "timedOut": null,
              "duration": 3919,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(widgetName).should(\"exist\").scrollIntoView();\ncy.findWidget(widgetName).then(($widget) => {\n  expect($widget.text().trim().length).to.be.greaterThan(0);\n});",
              "err": {},
              "uuid": "5b6bc58e-23b7-4f67-944e-f6b574b62b89",
              "parentUUID": "39a3b0ab-1c75-40af-bb17-225756ff80d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates technical details when security levels change",
              "fullTitle": "Technical Details Widget updates technical details when security levels change",
              "timedOut": null,
              "duration": 6987,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSecurityLevelChanges(\"technical-details\");",
              "err": {},
              "uuid": "ca077b66-614e-4b73-8d3c-6a185661cca0",
              "parentUUID": "39a3b0ab-1c75-40af-bb17-225756ff80d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "switches between CIA tabs if present",
              "fullTitle": "Technical Details Widget switches between CIA tabs if present",
              "timedOut": null,
              "duration": 5117,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"technical-details\").scrollIntoView();\ncy.findWidget(\"technical-details\").then(($widget) => {\n  const hasTabs = $widget.find(\n    '[role=\"tab\"], button:contains(\"Availability\"), button:contains(\"Integrity\")'\n  ).length > 0;\n  if (hasTabs) {\n    testWidgetTabSwitching(\"technical-details\");\n  } else {\n    cy.log(\"No tabs found in technical details widget - skipping tab test\");\n  }\n});",
              "err": {},
              "uuid": "83635882-31e5-4f30-b97a-8c182891f229",
              "parentUUID": "39a3b0ab-1c75-40af-bb17-225756ff80d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays implementation steps for selected security levels",
              "fullTitle": "Technical Details Widget displays implementation steps for selected security levels",
              "timedOut": null,
              "duration": 4206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"technical-details\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.findWidget(\"technical-details\").within(() => {\n  cy.contains(/implementation|step|instructions|how to|procedure/i).should(\n    \"exist\"\n  );\n  cy.get(\"ol li, ul li, [data-testid*='step'], [class*='step']\").should(\n    \"have.length.at.least\",\n    1\n  );\n});",
              "err": {},
              "uuid": "1728a0e0-ac7b-4758-b333-eef18deee6c6",
              "parentUUID": "39a3b0ab-1c75-40af-bb17-225756ff80d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "provides security-appropriate technical recommendations",
              "fullTitle": "Technical Details Widget provides security-appropriate technical recommendations",
              "timedOut": null,
              "duration": 4859,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.findWidget(\"technical-details\").scrollIntoView();\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.findWidget(\"technical-details\").within(() => {\n  cy.contains(\n    /encryption|authentication|authorization|audit|monitoring|redundancy/i\n  ).should(\"exist\");\n});\ncy.setSecurityLevels(\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.LOW\n);\ncy.findWidget(\"technical-details\").within(() => {\n  cy.contains(/password|backup|update|patch|basic/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "cfce006d-d9c2-4462-9309-630b8b45d254",
              "parentUUID": "39a3b0ab-1c75-40af-bb17-225756ff80d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b6bc58e-23b7-4f67-944e-f6b574b62b89",
            "ca077b66-614e-4b73-8d3c-6a185661cca0",
            "83635882-31e5-4f30-b97a-8c182891f229",
            "1728a0e0-ac7b-4758-b333-eef18deee6c6",
            "cfce006d-d9c2-4462-9309-630b8b45d254"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25088,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "827e67e9-ecdd-40b0-9b09-b5a1455380f2",
      "title": "",
      "fullFile": "cypress/e2e/widgets/technical-implementation-widget.cy.ts",
      "file": "cypress/e2e/widgets/technical-implementation-widget.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b5398560-687c-49a0-894b-184a8f4e62a5",
          "title": "Technical Implementation Widget Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "shows technical implementation details for security levels",
              "fullTitle": "Technical Implementation Widget Tests shows technical implementation details for security levels",
              "timedOut": null,
              "duration": 1823,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.get('[data-testid=\"technical-details-widget\"]').should(\"exist\").scrollIntoView();\ncy.verifyContentPresent([/technical|implementation|detail/i]);\ncy.get('[data-testid=\"technical-details-widget\"]').find(\".widget-header\").should(\"contain\", \"Technical Implementation Details\");",
              "err": {},
              "uuid": "aedcddf9-6012-4800-a5de-942462c3d176",
              "parentUUID": "b5398560-687c-49a0-894b-184a8f4e62a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updates implementation details when security levels change",
              "fullTitle": "Technical Implementation Widget Tests updates implementation details when security levels change",
              "timedOut": null,
              "duration": 2404,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testWidgetUpdatesWithSecurityLevels(\n  '[data-testid=\"technical-details-widget\"]',\n  {\n    initialLevels: [\n      SECURITY_LEVELS.LOW,\n      SECURITY_LEVELS.LOW,\n      SECURITY_LEVELS.LOW\n    ],\n    newLevels: [\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH,\n      SECURITY_LEVELS.HIGH\n    ],\n    expectTextChange: true\n  }\n);",
              "err": {},
              "uuid": "6a33dd33-644e-4149-936b-3aac85934977",
              "parentUUID": "b5398560-687c-49a0-894b-184a8f4e62a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "allows switching between confidentiality, integrity, and availability sections",
              "fullTitle": "Technical Implementation Widget Tests allows switching between confidentiality, integrity, and availability sections",
              "timedOut": null,
              "duration": 3276,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE,\n  SECURITY_LEVELS.MODERATE\n);\ncy.get('[data-testid=\"technical-details-widget\"]').should(\"exist\").scrollIntoView({ offset: { top: -100, left: 0 } });\ncy.get('[data-testid=\"technical-details-widget\"]').within(() => {\n  cy.get(\"button\").contains(/availability/i).should(\"exist\").click({ force: true }).wait(500);\n  cy.contains(/availability|uptime|recovery/i).should(\"be.visible\");\n  cy.get(\"h3, h4\").should(\"exist\");\n  cy.contains(/technical|implementation|details/i).should(\"exist\");\n  cy.get(\"button\").contains(/integrity/i).should(\"exist\").click({ force: true }).wait(500);\n  cy.contains(/integrity|consistency|accuracy/i).should(\"be.visible\");\n  cy.contains(/validation|verification|consistency|integrity/i).should(\n    \"be.visible\"\n  );\n  cy.get(\"button\").contains(/confidentiality/i).should(\"exist\").click({ force: true }).wait(500);\n  cy.contains(/confidentiality|protection|sensitive/i).should(\"be.visible\");\n  cy.contains(\n    /encryption|access control|authentication|confidentiality/i\n  ).should(\"be.visible\");\n});",
              "err": {},
              "uuid": "1565f704-d955-4b02-9feb-b798d58ceedb",
              "parentUUID": "b5398560-687c-49a0-894b-184a8f4e62a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows implementation requirements for different security levels",
              "fullTitle": "Technical Implementation Widget Tests shows implementation requirements for different security levels",
              "timedOut": null,
              "duration": 1380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.get('[data-testid=\"technical-details-widget\"]').scrollIntoView();\ncy.verifyContentPresent([\n  /technical|implementation|detail/i,\n  /high|security/i\n]);\ncy.get('[data-testid=\"technical-details-widget\"]').within(() => {\n  cy.contains(/technical|implementation|development|detail/i).should(\n    \"exist\"\n  );\n  cy.contains(/maintenance|effort|support|implementation/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "7d2e3be2-39d5-4d5f-81c4-f5adac20ca60",
              "parentUUID": "b5398560-687c-49a0-894b-184a8f4e62a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "displays different technical requirements based on security level",
              "fullTitle": "Technical Implementation Widget Tests displays different technical requirements based on security level",
              "timedOut": null,
              "duration": 2113,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.setSecurityLevels(\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.LOW,\n  SECURITY_LEVELS.LOW\n);\ncy.get('[data-testid=\"technical-details-widget\"]').should(\"exist\").scrollIntoView();\ncy.get('[data-testid=\"technical-details-widget\"]').within(() => {\n  cy.contains(/low/i).should(\"exist\");\n});\ncy.setSecurityLevels(\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH,\n  SECURITY_LEVELS.HIGH\n);\ncy.get('[data-testid=\"technical-details-widget\"]').within(() => {\n  cy.contains(/high/i).should(\"exist\");\n  cy.contains(/advanced|security|protection|high/i).should(\"exist\");\n});",
              "err": {},
              "uuid": "73c237ff-84c5-4b04-9734-e7516a0c92ce",
              "parentUUID": "b5398560-687c-49a0-894b-184a8f4e62a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aedcddf9-6012-4800-a5de-942462c3d176",
            "6a33dd33-644e-4149-936b-3aac85934977",
            "1565f704-d955-4b02-9feb-b798d58ceedb",
            "7d2e3be2-39d5-4d5f-81c4-f5adac20ca60",
            "73c237ff-84c5-4b04-9734-e7516a0c92ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10996,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "docs/cypress/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "code": true,
        "timestamp": "mmddyyyy_HHMMss",
        "charts": true,
        "showHooks": "failed",
        "embeddedScreenshots": true
      },
      "version": "6.2.0"
    }
  }
}