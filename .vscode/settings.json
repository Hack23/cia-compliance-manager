{
  "cSpell.words": [
    "capex",
    "opex",
    "CAPEX",
    "OPEX",
    "Elems",
    "partyrock",
    "testid",
    "jsdom",
    "vitest",
    "tailwindcss",
    "esbuild",
    "autoprefixer",
    "postcss",
    "dbaeumer",
    "esbenp",
    "antfu",
    "Zixuan",
    "bradlc",
    "dsznajder",
    "hbenl",
    "ryanluker",
    "kohler",
    "formulahendry",
    "errorlens",
    "usernamehw",
    "eamodio",
    "gitlens",
    "oderwat",
    "deque",
    "stackbreak",
    "mhutchie",
    "devcontainers",
    "libgbm",
    "libnotify",
    "libnss",
    "libxss",
    "libasound",
    "libxtst",
    "xauth",
    "dbus",
    "pkill",
    "xvfb",
    "Xvfb",
    "DBUS"
  ],
  "cSpell.ignorePaths": [
    "package-lock.json",
    "node_modules",
    "vscode-extension",
    ".git/objects",
    ".vscode",
    ".vscode-insiders"
  ],

  // Editor settings
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "never"
  },
  "editor.linkedEditing": true,
  "editor.stickyScroll.enabled": true,
  "editor.guides.bracketPairs": true,

  // TypeScript settings
  "typescript.preferences.importModuleSpecifier": "shortest",
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.suggestionActions.enabled": true,
  "typescript.preferences.preferTypeOnlyAutoImports": true,
  "typescript.inlayHints.parameterNames.enabled": "literals",

  // Tailwind settings
  "tailwindCSS.experimental.classRegex": [
    ["clsx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ],
  "tailwindCSS.emmetCompletions": true,
  "css.validate": false,

  // Testing settings
  "vitest.enable": true,
  "vitest.commandLine": "npx vitest",
  "vitest.include": ["**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"],
  "testing.automaticallyOpenPeekView": "never",
  "coverage-gutters.showLineCoverage": true,

  // File associations
  "files.associations": {
    "*.css": "tailwindcss",
    "*.module.css": "tailwindcss"
  },

  // Error visualization
  "errorLens.enabledDiagnosticLevels": ["error", "warning"],
  "errorLens.exclude": ["never used"],

  // Copilot settings
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": true,
    "typescript": true,
    "typescriptreact": true,
    "javascript": true,
    "javascriptreact": true
  },
  "github.copilot.advanced": {
    "language.enableAutoCompletions": {
      "typescript": true,
      "typescriptreact": true
    }
  },
  // Custom instructions for GitHub Copilot
  "github.copilot.editor.customization": {
    "repositoryInstructions": {
      "instructions": "You're working on the CIA Compliance Manager application, which helps organizations assess security controls across the Confidentiality, Integrity, and Availability (CIA) triad. Use these coding conventions for consistency:\n\n1. TYPESCRIPT STANDARDS:\n- Use TypeScript 5.x features where appropriate\n- Always use explicit types (avoid 'any', prefer unknown if necessary)\n- Use interface for public API and type for internal structures\n- Use mapped types, conditional types, and utility types (Pick, Omit) where appropriate\n- Follow strict null checking principles\n- Use type narrowing with type guards\n- Use generics to improve code reuse and type safety\n\n2. PROJECT STRUCTURE:\n- React components live in src/components/ with associated test files\n- Hooks live in src/hooks/ with associated test files\n- Constants live in dedicated files in src/constants/\n- Type definitions go in src/types/\n- Tests should use the mock utilities in src/tests/mockFactory.ts\n\n3. COMPONENTS:\n- Use function components with explicit return types\n- Props should be defined with interfaces in a types.ts file\n- Add data-testid attributes to elements that need testing\n- Use custom hooks for shared logic\n- Organize complex widgets under components/widgets/\n\n4. TESTING:\n- Tests should be located adjacent to the files they test\n- Use constants from appConstants.ts for test validation\n- Focus on behavior, not implementation details\n- Use createMockOptions() for mocking CIA option structures\n- Test components in isolation with mocked dependencies\n- Current testing targets: 90%+ statement, 85%+ branch, 85%+ function coverage\n\n5. STATE MANAGEMENT:\n- Use React hooks for local state\n- Use useCIAOptions() hook for accessing options data\n- Use constants for string values\n- Avoid direct DOM manipulation\n\n6. STYLING:\n- Use Tailwind CSS for styling\n- Use data-testid attributes for testing, not CSS classes\n- Use CSS variables for theming where appropriate\n\nRemind me if I deviate from these practices in my code."
    }
  }
}
