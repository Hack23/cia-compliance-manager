{
  "cSpell.words": [
    "capex",
    "opex",
    "CAPEX",
    "OPEX",
    "Elems",
    "partyrock",
    "testid",
    "jsdom",
    "vitest",
    "tailwindcss",
    "esbuild",
    "autoprefixer",
    "postcss",
    "dbaeumer",
    "esbenp",
    "antfu",
    "Zixuan",
    "bradlc",
    "dsznajder",
    "hbenl",
    "ryanluker",
    "kohler",
    "formulahendry",
    "errorlens",
    "usernamehw",
    "eamodio",
    "gitlens",
    "oderwat",
    "deque",
    "stackbreak",
    "mhutchie",
    "devcontainers",
    "libgbm",
    "libnotify",
    "libnss",
    "libxss",
    "libasound",
    "libxtst",
    "xauth",
    "dbus",
    "pkill",
    "xvfb",
    "Xvfb",
    "DBUS",
    // Added domain-specific terms
    "NIST",
    "GDPR",
    "HIPAA",
    "SOC2",
    "CSF",
    "GRC",
    "SIEM",
    "SOAR",
    "CMDB",
    "ITSM",
    "OSCAL",
    "TAXII",
    "STIX",
    "triad",
    "RBAC",
    // Additional security and compliance terms
    "MTTR",
    "MTBF",
    "MTTD",
    "MTTF",
    "MTTS",
    "RPO",
    "RTO",
    "BCM",
    "BCP",
    "DRP",
    "MFA",
    "FIPS",
    "ZTA",
    "ZERO",
    // UI/UX terms
    "WCAG",
    "a11y",
    "microcopy",
    "heatmap",
    "wireframe",
    "handoff",
    "microinteraction",
    "prototyping",
    "affordance",
    "usability",
    "skeuomorphic",
    "neumorphic",
    // Business development terms
    "CISO",
    "CRO",
    "ROI",
    "TCO",
    "TAM",
    "SAM",
    "SOM",
    "KPI",
    "OKR",
    "GTM",
    "CAC",
    "LTV",
    "ARR",
    "MRR",
    "B2B",
    "B2G",
    "RACI"
  ],
  "cSpell.ignorePaths": [
    "package-lock.json",
    "node_modules",
    "vscode-extension",
    ".git/objects",
    ".vscode",
    ".vscode-insiders"
  ],

  // Editor settings
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "explicit"
  },
  "editor.linkedEditing": true,
  "editor.stickyScroll.enabled": true,
  "editor.guides.bracketPairs": true,
  "editor.suggestSelection": "first",
  "editor.tabSize": 2,

  // TypeScript settings - enhanced for quality
  "typescript.preferences.importModuleSpecifier": "shortest",
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.suggestionActions.enabled": true,
  "typescript.preferences.preferTypeOnlyAutoImports": true,
  "typescript.inlayHints.parameterNames.enabled": "literals",
  "typescript.preferences.quoteStyle": "single",
  "typescript.tsserver.experimental.enableProjectDiagnostics": true,
  "typescript.preferences.useAliasesForRenames": false,
  "typescript.suggest.completeJSDocs": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.preferences.renameMatchingJsxTags": true,
  "typescript.tsserver.maxTsServerMemory": 4096,

  // Tailwind settings
  "tailwindCSS.experimental.classRegex": [
    ["clsx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ],
  "tailwindCSS.emmetCompletions": true,
  "css.validate": false,

  // Testing settings - enhanced
  "vitest.enable": true,
  "vitest.commandLine": "npx vitest",
  "vitest.include": ["**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"],
  "testing.automaticallyOpenPeekView": "never",
  "coverage-gutters.showLineCoverage": true,
  "coverage-gutters.showRulerCoverage": true,
  "coverage-gutters.highlightdark": "rgba(45, 121, 10, 0.2)",
  "coverage-gutters.noHighlightDark": "rgba(121, 31, 10, 0.2)",
  "coverage-gutters.partialHighlightDark": "rgba(245, 196, 0, 0.2)",
  "vitest.showFailMessages": true,

  // File associations
  "files.associations": {
    "*.css": "tailwindcss",
    "*.module.css": "tailwindcss",
    "*.test.ts": "typescript",
    "*.test.tsx": "typescriptreact",
    "*.cy.ts": "typescript"
  },

  // Error visualization
  "errorLens.enabledDiagnosticLevels": ["error", "warning"],
  "errorLens.exclude": ["never used"],
  "problems.showCurrentInStatus": true,

  // Eslint settings - updated with absolute path to configuration file
  "eslint.validate": [
    "typescript",
    "typescriptreact",
    "javascript",
    "javascriptreact"
  ],
  "eslint.enable": true,
  "eslint.format.enable": false,
  "eslint.run": "onType",
  "eslint.workingDirectories": [
    { "mode": "auto" },
    { "directory": "./src", "changeProcessCWD": true },
    { "directory": "./cypress", "changeProcessCWD": true }
  ],
  "eslint.options": {
    "overrideConfigFile": "/workspaces/cia-compliance-manager/.eslintrc.cjs"
  },
  "eslint.codeActionsOnSave.rules": [
    "@typescript-eslint/no-unused-vars",
    "@typescript-eslint/no-explicit-any",
    "react-hooks/rules-of-hooks",
    "react-hooks/exhaustive-deps"
  ],

  "eslint.probe": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "vue",
    "markdown",
    "json",
    "jsonc"
  ],

  // Copilot settings
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": true,
    "typescript": true,
    "typescriptreact": true,
    "javascript": true,
    "javascriptreact": true
  },
  "github.copilot.advanced": {
    "language.enableAutoCompletions": {
      "typescript": true,
      "typescriptreact": true,
      "javascript": true,
      "javascriptreact": true,
      "json": true,
      "jsonc": true
    },
    "indentationMode": "keep",
    "inlineSuggestCount": 3,
    "listCount": 5
  },
  // Ensure Copilot prefers TypeScript file extensions
  "github.copilot.fileTypes": {
    "javascript": "typescript",
    "javascriptreact": "typescriptreact"
  },

  "github.copilot.editor.customization": {
    "repositoryInstructions": {
      "instructions": "You're working on the CIA Compliance Manager application (version 0.8.x), which helps organizations assess security controls across the Confidentiality, Integrity, and Availability (CIA) triad. The TOP PRIORITY is to reach version 1.0 by completing and fixing existing functionality only, not adding new features. Focus on stability, correctness, and completing what's already started.\n\n1. VERSION 1.0 PRIORITY FOCUS (AS OF 2025-03-23):\n- ONLY fix and complete existing widgets – no new features\n- Fix bugs and inconsistencies\n- Ensure data consistency between components and services\n- Complete any partially implemented functionality\n- Optimize performance of existing code\n- Increase test coverage on current features\n- Follow existing patterns exactly – do not introduce new ones\n\n2. TYPESCRIPT-FIRST APPROACH:\n- ALWAYS use TypeScript (.ts, .tsx) for new files; NEVER use JavaScript (.js, .jsx)\n- All components must be .tsx files\n- Utilities, services, and non-component code should be .ts files\n- Tests must use .test.ts or .test.tsx extensions\n- Use TypeScript's strict type checking features and explicit types (avoid 'any'; use unknown if necessary)\n\n3. BUSINESS CONTEXT:\n- The application helps security officers evaluate and implement security controls\n- It assesses Confidentiality, Integrity, and Availability with levels: None, Low, Moderate, High, Very High\n- Evaluates business impact across Financial, Operational, Regulatory, Reputational, and Strategic dimensions\n- Maps compliance to frameworks such as NIST, ISO, GDPR, HIPAA, and SOC2\n- Tracks implementation costs as CAPEX (upfront) and OPEX (ongoing)\n- Target users include CISOs, security officers, compliance managers, and IT implementers\n- Value proposition: cost optimization, risk reduction, and compliance simplification\n\n4. TYPESCRIPT STANDARDS:\n- Use TypeScript 5.8+ features including const type parameters and decorators\n- Always use explicit types and interfaces for public APIs and internal structures\n- Use mapped, conditional, and utility types (Pick, Omit) where appropriate\n- Follow strict null checking principles with proper guards\n- Use type narrowing with explicit type guards (e.g., isSecurityLevel, isWidgetConfig)\n- Leverage generics, readonly modifiers, and discriminated unions for better type safety\n- Prefer const assertions (as const) for literal values\n\n5. UI/UX DESIGN PRINCIPLES:\n- Adhere to existing design patterns – do not introduce new ones\n- Follow WCAG 2.1 AA accessibility standards for interactive elements\n- Use consistent color coding for security levels (red = critical, amber = warning, green = compliant)\n- Implement progressive disclosure for complex security information\n- Ensure responsive layouts across desktop, tablet, and mobile viewports\n- Use clear microcopy and intuitive data visualizations for security metrics and compliance status\n- Include contextual help, tooltips, and proper contrast for dark mode\n\n6. BUSINESS VALUE FOCUS:\n- Validate that business value calculations (ROI, risk reduction, cost savings) are accurate and complete\n- Document ROI and business justifications in comments\n- Verify that components correctly highlight cost savings and risk reduction\n- Complete any partially implemented executive reporting features\n- Ensure accurate compliance mappings and calculation consistency across the application\n\n7. REACT COMPONENT DESIGN:\n- Focus on fixing and completing existing components – do not create new ones\n- Ensure all component props have proper TypeScript interfaces\n- Add missing data-testid attributes as per the cypress/test-data/data-testid-analysis.md\n- Resolve inconsistent state management and enhance error handling\n- Optimize performance using useMemo and useCallback with proper dependency arrays\n- Correct any accessibility issues in existing components\n\n8. REUSABILITY & CODE REUSE - **MANDATORY**:\n- **ALWAYS** reuse or extend existing common utilities, helpers, constants, components, and types.\n   - **Key Reusable Items:**\n      - **Types:** `src/types/cia.ts`, `src/types/businessImpact.ts`, `src/types/widgets.ts`, `src/types/compliance.ts`, `src/types/componentProps.ts`, `src/types/widget-props.ts`\n      - **Constants:** `src/constants/securityLevels.ts`, `src/constants/businessConstants.ts`, `src/constants/appConstants.ts`, `src/constants/uiConstants.ts`, `src/constants/testIds.ts`\n      - **Utilities:** `src/utils/securityLevelUtils.ts`, `src/utils/riskUtils.ts`, `src/utils/formatUtils.ts`, `src/utils/typeGuards.ts`, `src/utils/colorUtils.ts`\n      - **Services:** `src/services/ciaContentService.ts`, `src/services/businessImpactService.ts`, `src/services/complianceService.ts`, `src/services/securityMetricsService.ts`, `src/services/BaseService.ts`\n      - **Components:** `src/components/UI/*`, `src/components/common/*`, `src/components/charts/RadarChart.tsx`\n- **NEVER** create new types files unless absolutely necessary; extend existing ones instead.\n- **Any** new component/type PR **MUST** justify why existing ones couldn't be reused/extended with a detailed comment.\n\n9. TESTING GUIDELINES:\n- Configure Vite and Vitest for fast feedback and native ESM support.\n- Separate unit and integration tests, leveraging Vite's watch mode and coverage tools.\n- Mock external dependencies using existing helpers with proper TypeScript typings.\n- Aim for a minimum of 80% code coverage.\n- Write tests for critical business logic and security paths.\n\nPlease help me complete version 1.0 by fixing and completing existing functionality only – no new features. **REUSE EVERYTHING YOU CAN!**"
    }
  },

  // Additional supportive settings
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.test.ts, ${capture}.spec.ts, ${capture}.cy.ts",
    "*.tsx": "${capture}.test.tsx, ${capture}.spec.tsx, ${capture}.cy.tsx",
    "*.js": "${capture}.test.js, ${capture}.spec.js",
    "*.jsx": "${capture}.test.jsx, ${capture}.spec.jsx",
    "types.ts": "${capture}.d.ts, ${capture}.schema.ts"
  },
  "terminal.integrated.defaultProfile.linux": "bash",
  "diffEditor.ignoreTrimWhitespace": false,
  "security.workspace.trust.enabled": true
}
